scalar DateTime

type Query {
    info: String!
    feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
    link(id: String!): Link!
    getFlightController(id: ID!): FlightController!
    flightControllerFeed: FlightControllerFeed!
    userList: UserList!
    merchantList: MerchantList!
}

type Mutation {
    post(
      url: String!,
      description: String!
    ): Link!
    addFlightController(
      flightController: AddFlightControllerInput!
    ) : FlightController
    updateFlightController(
      flightController: UpdateFlightControllerInput!
    ) : FlightController
    deleteFlightController(id: ID!) : FlightController
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    updateLink(id: ID!, url: String, description: String): Link
    deleteLink(id: ID!): Link
    vote(linkId: ID!): Vote
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

type FlightControllerFeed {
  flightControllers: [FlightController!]!
  count: Int!
}

type UserList {
  users: [User!]!
}



input UpdateFlightControllerInput{
  id: ID!
  name: String
  disabled: Boolean
  releaseDate: String
  uarts: Int
  gyroOne: Float
  gyroTwo: Float
  weightInGrams: Float
  cpu: String
  dimensions: String
  description: String
  holePattern: String
  voltageInputMin: Float
  voltageInputMax: Float
  osd: Boolean
  accelerometer: Boolean
  barometer: Boolean
  spektrumPort: Boolean
  usbInterface: Boolean
  ledWS2812Support: Boolean
  rssiPad: Boolean
  currentSensor: Boolean
  beeperPad: Boolean
  beeperOnBoard: Boolean
  antiVibrationGrommets: Boolean
  builtInReceiver: String
  postedBy: UserInput
  createdAt: DateTime
}


input AddFlightControllerInput{
  name: String
  disabled: Boolean
  releaseDate: String
  uarts: Int
  gyroOne: Float
  gyroTwo: Float
  weightInGrams: Float
  cpu: String
  dimensions: String
  description: String
  holePattern: String
  voltageInputMin: Float
  voltageInputMax: Float
  osd: Boolean
  accelerometer: Boolean
  barometer: Boolean
  spektrumPort: Boolean
  usbInterface: Boolean
  ledWS2812Support: Boolean
  rssiPad: Boolean
  currentSensor: Boolean
  beeperPad: Boolean
  beeperOnBoard: Boolean
  antiVibrationGrommets: Boolean
  builtInReceiver: String
  postedBy: UserInput
  createdAt: DateTime
}

type FlightController {
  id: ID
  name: String
  disabled: Boolean
  releaseDate: String
  uarts: Int
  gyroOne: Float
  gyroTwo: Float
  weightInGrams: Float
  cpu: String
  dimensions: String
  description: String
  holePattern: String
  voltageInputMin: Float
  voltageInputMax: Float
  osd: Boolean
  accelerometer: Boolean
  barometer: Boolean
  spektrumPort: Boolean
  usbInterface: Boolean
  ledWS2812Support: Boolean
  rssiPad: Boolean
  currentSensor: Boolean
  beeperPad: Boolean
  beeperOnBoard: Boolean
  antiVibrationGrommets: Boolean
  builtInReceiver: String
  postedBy: User
  createdAt: DateTime
}

##### Merchant
type Merchant {
    id: ID!
    name: String!
    url: String!
    postedBy: User
    createdAt: DateTime!
    affiliateId: String
    disabled: Boolean
}

type MerchantList {
  merchants: [Merchant!]!
}

#### Links
type Feed {
  links: [Link!]!
  count: Int!
}

type Link {
    id: ID!
    description: String!
    url: String!
    postedBy: User
    createdAt: DateTime!
    votes: [Vote!]!
}

#### User Auth
type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
  flightControllers: [FlightController!]!
}

input UserInput {
  id: ID!
  name: String!
  email: String!
}

enum ReceiverProtocol{
  CROSSFIRE
  DSMX
  FRSKY
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}
