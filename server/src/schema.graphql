scalar DateTime

type Query {
    info: String!
    feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
    link(id: String!): Link!
    flightControllerFeed : FlightControllerFeed!
    userList: UserList!
}

type Mutation {
    post(
      url: String!,
      description: String!
    ): Link!
    addFlightController(
      name: String!,
      releaseDate: String!,
      uarts: Int!,
      GyroOne: Float,
      GyroTwo: Float,
      weightInGrams: Float,
      cpu: String!,
      dimensions: String,
      holePattern: String!,
      voltageInputMin: Float!,
      voltageInputMax: Float!,
      osd: Boolean!,
      accelerometer: Boolean!,
      barometer: Boolean!,
      spektrumPort: Boolean!,
      usbInterface: Boolean!,
      LedWS2812Support: Boolean!,
      RSSIPad: Boolean!,
      currentSensor: Boolean!,
      beeperPad: Boolean!,
      beeperOnBoard: Boolean!,
      antiVibrationGrommets: Boolean!,
      builtInReceiver: String
    ) : FlightController!
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    updateLink(id: ID!, url: String, description: String): Link
    deleteLink(id: ID!): Link
    vote(linkId: ID!): Vote
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

type FlightControllerFeed {
  flightControllers: [FlightController!]!
  count: Int!
}

type UserList {
  users: [User!]!
}

type Feed {
  links: [Link!]!
  count: Int!
}

type Link {
    id: ID!
    description: String!
    url: String!
    postedBy: User
    createdAt: DateTime!
    votes: [Vote!]!
}

type FlightController {
  id: ID!
  name: String!
  releaseDate: String!
  uarts: Int!
  GyroOne: Float
  GyroTwo: Float
  weightInGrams: Float
  cpu: String!
  dimensions: String
  holePattern: String!
  voltageInputMin: Float!
  voltageInputMax: Float!
  osd: Boolean!
  accelerometer: Boolean!
  barometer: Boolean!
  spektrumPort: Boolean!
  usbInterface: Boolean!
  LedWS2812Support: Boolean!
  RSSIPad: Boolean!
  currentSensor: Boolean!
  beeperPad: Boolean!
  beeperOnBoard: Boolean!
  antiVibrationGrommets: Boolean!
  builtInReceiver: String
  postedBy: User
  cretedAt: DateTime!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
  flightControllers: [FlightController!]!
}

enum ReceiverProtocol{
  CROSSFIRE
  DSMX
  FRSKY
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}