scalar DateTime

type Query {
    info: String!
    feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
    link(id: String!): Link!
    getFlightController(id: ID!): FlightController!
    flightControllerFeed: FlightControllerFeed!
    flightControllerFilter(
        flightControllerFilter: FlightControllerFilter!
    ) : FlightControllerFeed!
    userList: UserList!
    merchantList: MerchantList!
    getMerchant(id: ID!): Merchant!
}

type Mutation {
    post(
      url: String!,
      description: String!
    ): Link!
    addFlightController(
      flightController: AddFlightControllerInput!
    ) : FlightController
    updateFlightController(
      flightController: UpdateFlightControllerInput!
    ) : FlightController
    deleteFlightController(id: ID!) : FlightController
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    updateLink(id: ID!, url: String, description: String): Link
    deleteLink(id: ID!): Link
    vote(linkId: ID!): Vote
    # Merchant
    addMerchant(merchant: MerchantInput!) : Merchant
    updateMerchant(merchant: MerchantEdit!) : Merchant
    # Flight Controller Merchant Link
    addFlightControllerMerchantLink(flightControllerMerchantLink : AddFlightControllerMerchantLink):
      FlightControllerMerchantLink
    deleteFlightControllerMerchantLink(id: ID!) : FlightControllerMerchantLink
    deleteMerchant(id: ID!) : Merchant
}


type Subscription {
  newLink: Link
  newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

type FlightControllerFeed {
  flightControllers: [FlightController!]!
  count: Int!
}

type UserList {
  users: [User!]!
}


### FlightController
input UpdateFlightControllerInput{
  id: ID!
  name: String
  disabled: Boolean
  releaseDate: String
  uarts: Int
  gyroOne: Float
  gyroTwo: Float
  weightInGrams: Float
  cpu: String
  dimensions: String
  description: String
  holePattern: String
  voltageInputMin: Float
  voltageInputMax: Float
  osd: Boolean
  accelerometer: Boolean
  barometer: Boolean
  spektrumPort: Boolean
  usbInterface: Boolean
  ledWS2812Support: Boolean
  rssiPad: Boolean
  currentSensor: Boolean
  beeperPad: Boolean
  beeperOnBoard: Boolean
  antiVibrationGrommets: Boolean
  builtInReceiver: ReceiverProtocol
  postedBy: UserInput
  createdAt: DateTime
}

input FlightControllerFilter{
    name: String
    minUarts: Int
    releaseDateAfter: DateTime
    voltageInputMin: Float
    voltageInputMax: Float
    spektrumPort: Boolean
    ledWS2812Support: Boolean
    osd: Boolean
    accelerometer: Boolean
    accelerometer: Boolean
    barometer: Boolean
    usbInterface: Boolean
    rssiPad: Boolean
    currentSensor: Boolean
    beeperOnBoard: Boolean
    antiVibrationGrommets: Boolean
    builtInReceiver: ReceiverProtocol
}


input AddFlightControllerInput{
  name: String
  disabled: Boolean
  releaseDate: String
  uarts: Int
  gyroOne: Float
    gyroTwo: Float
    weightInGrams: Float
    cpu: String
    dimensions: String
    description: String
    holePattern: String
    voltageInputMin: Float
    voltageInputMax: Float
    builtInReceiver: ReceiverProtocol
    osd: Boolean
    accelerometer: Boolean
    barometer: Boolean
    spektrumPort: Boolean
    usbInterface: Boolean
    ledWS2812Support: Boolean
    rssiPad: Boolean
    currentSensor: Boolean
    beeperPad: Boolean
    beeperOnBoard: Boolean
    antiVibrationGrommets: Boolean
  postedBy: UserInput
  createdAt: DateTime
}

type FlightController {
  id: ID
  name: String
  disabled: Boolean
  releaseDate: String
  uarts: Int
  gyroOne: Float
  gyroTwo: Float
  weightInGrams: Float
  cpu: String
  dimensions: String
  description: String
  holePattern: String
  voltageInputMin: Float
  voltageInputMax: Float
  osd: Boolean
  accelerometer: Boolean
  barometer: Boolean
  spektrumPort: Boolean
  usbInterface: Boolean
  ledWS2812Support: Boolean
  rssiPad: Boolean
  currentSensor: Boolean
  beeperPad: Boolean
  beeperOnBoard: Boolean
  antiVibrationGrommets: Boolean
  builtInReceiver: ReceiverProtocol
  postedBy: User
  updatedBy: User
  createdAt: DateTime
  updatedAt: DateTime
  merchantLinks: [FlightControllerMerchantLink!]!
}

##### Merchant
type Merchant {
  id: ID!
  name: String!
  url: String!
  postedBy: User
  updatedBy: User
  createdAt: DateTime
  updatedAt: DateTime
  affiliateId: String
  disabled: Boolean
  flightControllers: [FlightControllerMerchantLink!]!
}

input MerchantInput {
    name: String!
    url: String!
    affiliateId: String
    disabled: Boolean
}

input MerchantEdit {
    id: ID!
    name: String!
    url: String!
    affiliateId: String
    disabled: Boolean
}

type MerchantList {
  merchants: [Merchant!]!
}

#### Flight Controller Merchant Links
type FlightControllerMerchantLink{
  id: ID!
  merchant: Merchant!
  flightController: FlightController!
  url: String!
  price: Float!
  inStock: Boolean
  postedBy: User
  createdAt: DateTime
  updatedAt: DateTime
}

input AddFlightControllerMerchantLink{
  id: ID
  merchantId: String!
  flightControllerId: String!
  url: String!
  price: Float!
  inStock: Boolean
}

#### Links
type Feed {
  links: [Link!]!
  count: Int!
}

type Link {
    id: ID!
    description: String!
    url: String!
    postedBy: User
    createdAt: DateTime!
    votes: [Vote!]!
}

#### User Auth
type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
  flightControllers: [FlightController!]!
  addedMerchants: [Merchant!]!
  editedMerchants: [Merchant!]!
  editedFlightControllers: [Merchant!]!
}

input UserInput {
  id: ID!
  name: String!
  email: String!
}

enum ReceiverProtocol{
    CROSSFIRE
    FRSKY
    FLYSKY
    SPEKTRUM
}

enum HolePattern{
    SIXTEEN # 16x16
    TWENTY # 20x20
    THIRTY # 30.5x30.5
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

