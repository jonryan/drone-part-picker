// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  flightController: (where?: FlightControllerWhereInput) => Promise<boolean>;
  flightControllerMerchantLink: (
    where?: FlightControllerMerchantLinkWhereInput
  ) => Promise<boolean>;
  link: (where?: LinkWhereInput) => Promise<boolean>;
  merchant: (where?: MerchantWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  flightController: (
    where: FlightControllerWhereUniqueInput
  ) => FlightControllerNullablePromise;
  flightControllers: (args?: {
    where?: FlightControllerWhereInput;
    orderBy?: FlightControllerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FlightController>;
  flightControllersConnection: (args?: {
    where?: FlightControllerWhereInput;
    orderBy?: FlightControllerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FlightControllerConnectionPromise;
  flightControllerMerchantLink: (
    where: FlightControllerMerchantLinkWhereUniqueInput
  ) => FlightControllerMerchantLinkNullablePromise;
  flightControllerMerchantLinks: (args?: {
    where?: FlightControllerMerchantLinkWhereInput;
    orderBy?: FlightControllerMerchantLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FlightControllerMerchantLink>;
  flightControllerMerchantLinksConnection: (args?: {
    where?: FlightControllerMerchantLinkWhereInput;
    orderBy?: FlightControllerMerchantLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FlightControllerMerchantLinkConnectionPromise;
  link: (where: LinkWhereUniqueInput) => LinkNullablePromise;
  links: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Link>;
  linksConnection: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LinkConnectionPromise;
  merchant: (where: MerchantWhereUniqueInput) => MerchantNullablePromise;
  merchants: (args?: {
    where?: MerchantWhereInput;
    orderBy?: MerchantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Merchant>;
  merchantsConnection: (args?: {
    where?: MerchantWhereInput;
    orderBy?: MerchantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MerchantConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VoteNullablePromise;
  votes: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vote>;
  votesConnection: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFlightController: (
    data: FlightControllerCreateInput
  ) => FlightControllerPromise;
  updateFlightController: (args: {
    data: FlightControllerUpdateInput;
    where: FlightControllerWhereUniqueInput;
  }) => FlightControllerPromise;
  updateManyFlightControllers: (args: {
    data: FlightControllerUpdateManyMutationInput;
    where?: FlightControllerWhereInput;
  }) => BatchPayloadPromise;
  upsertFlightController: (args: {
    where: FlightControllerWhereUniqueInput;
    create: FlightControllerCreateInput;
    update: FlightControllerUpdateInput;
  }) => FlightControllerPromise;
  deleteFlightController: (
    where: FlightControllerWhereUniqueInput
  ) => FlightControllerPromise;
  deleteManyFlightControllers: (
    where?: FlightControllerWhereInput
  ) => BatchPayloadPromise;
  createFlightControllerMerchantLink: (
    data: FlightControllerMerchantLinkCreateInput
  ) => FlightControllerMerchantLinkPromise;
  updateFlightControllerMerchantLink: (args: {
    data: FlightControllerMerchantLinkUpdateInput;
    where: FlightControllerMerchantLinkWhereUniqueInput;
  }) => FlightControllerMerchantLinkPromise;
  updateManyFlightControllerMerchantLinks: (args: {
    data: FlightControllerMerchantLinkUpdateManyMutationInput;
    where?: FlightControllerMerchantLinkWhereInput;
  }) => BatchPayloadPromise;
  upsertFlightControllerMerchantLink: (args: {
    where: FlightControllerMerchantLinkWhereUniqueInput;
    create: FlightControllerMerchantLinkCreateInput;
    update: FlightControllerMerchantLinkUpdateInput;
  }) => FlightControllerMerchantLinkPromise;
  deleteFlightControllerMerchantLink: (
    where: FlightControllerMerchantLinkWhereUniqueInput
  ) => FlightControllerMerchantLinkPromise;
  deleteManyFlightControllerMerchantLinks: (
    where?: FlightControllerMerchantLinkWhereInput
  ) => BatchPayloadPromise;
  createLink: (data: LinkCreateInput) => LinkPromise;
  updateLink: (args: {
    data: LinkUpdateInput;
    where: LinkWhereUniqueInput;
  }) => LinkPromise;
  updateManyLinks: (args: {
    data: LinkUpdateManyMutationInput;
    where?: LinkWhereInput;
  }) => BatchPayloadPromise;
  upsertLink: (args: {
    where: LinkWhereUniqueInput;
    create: LinkCreateInput;
    update: LinkUpdateInput;
  }) => LinkPromise;
  deleteLink: (where: LinkWhereUniqueInput) => LinkPromise;
  deleteManyLinks: (where?: LinkWhereInput) => BatchPayloadPromise;
  createMerchant: (data: MerchantCreateInput) => MerchantPromise;
  updateMerchant: (args: {
    data: MerchantUpdateInput;
    where: MerchantWhereUniqueInput;
  }) => MerchantPromise;
  updateManyMerchants: (args: {
    data: MerchantUpdateManyMutationInput;
    where?: MerchantWhereInput;
  }) => BatchPayloadPromise;
  upsertMerchant: (args: {
    where: MerchantWhereUniqueInput;
    create: MerchantCreateInput;
    update: MerchantUpdateInput;
  }) => MerchantPromise;
  deleteMerchant: (where: MerchantWhereUniqueInput) => MerchantPromise;
  deleteManyMerchants: (where?: MerchantWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (args: {
    data: VoteUpdateInput;
    where: VoteWhereUniqueInput;
  }) => VotePromise;
  upsertVote: (args: {
    where: VoteWhereUniqueInput;
    create: VoteCreateInput;
    update: VoteUpdateInput;
  }) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  flightController: (
    where?: FlightControllerSubscriptionWhereInput
  ) => FlightControllerSubscriptionPayloadSubscription;
  flightControllerMerchantLink: (
    where?: FlightControllerMerchantLinkSubscriptionWhereInput
  ) => FlightControllerMerchantLinkSubscriptionPayloadSubscription;
  link: (
    where?: LinkSubscriptionWhereInput
  ) => LinkSubscriptionPayloadSubscription;
  merchant: (
    where?: MerchantSubscriptionWhereInput
  ) => MerchantSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC";

export type VoteOrderByInput = "id_ASC" | "id_DESC";

export type FlightControllerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "disabled_ASC"
  | "disabled_DESC"
  | "releaseDate_ASC"
  | "releaseDate_DESC"
  | "uarts_ASC"
  | "uarts_DESC"
  | "gyroOne_ASC"
  | "gyroOne_DESC"
  | "gyroTwo_ASC"
  | "gyroTwo_DESC"
  | "weightInGrams_ASC"
  | "weightInGrams_DESC"
  | "cpu_ASC"
  | "cpu_DESC"
  | "description_ASC"
  | "description_DESC"
  | "dimensions_ASC"
  | "dimensions_DESC"
  | "holePattern_ASC"
  | "holePattern_DESC"
  | "voltageInputMin_ASC"
  | "voltageInputMin_DESC"
  | "voltageInputMax_ASC"
  | "voltageInputMax_DESC"
  | "osd_ASC"
  | "osd_DESC"
  | "accelerometer_ASC"
  | "accelerometer_DESC"
  | "barometer_ASC"
  | "barometer_DESC"
  | "spektrumPort_ASC"
  | "spektrumPort_DESC"
  | "usbInterface_ASC"
  | "usbInterface_DESC"
  | "ledWS2812Support_ASC"
  | "ledWS2812Support_DESC"
  | "rssiPad_ASC"
  | "rssiPad_DESC"
  | "currentSensor_ASC"
  | "currentSensor_DESC"
  | "beeperPad_ASC"
  | "beeperPad_DESC"
  | "beeperOnBoard_ASC"
  | "beeperOnBoard_DESC"
  | "antiVibrationGrommets_ASC"
  | "antiVibrationGrommets_DESC"
  | "builtInReceiver_ASC"
  | "builtInReceiver_DESC"
  | "threeVoltOutput_ASC"
  | "threeVoltOutput_DESC"
  | "fiveVoltOut_ASC"
  | "fiveVoltOut_DESC"
  | "cameraControl_ASC"
  | "cameraControl_DESC";

export type MerchantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "affiliateId_ASC"
  | "affiliateId_DESC"
  | "disabled_ASC"
  | "disabled_DESC";

export type FlightControllerMerchantLinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "price_ASC"
  | "price_DESC"
  | "inStock_ASC"
  | "inStock_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneWithoutEditedFlightControllersInput {
  create?: Maybe<UserCreateWithoutEditedFlightControllersInput>;
  update?: Maybe<UserUpdateWithoutEditedFlightControllersDataInput>;
  upsert?: Maybe<UserUpsertWithoutEditedFlightControllersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type FlightControllerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LinkUpdateOneRequiredWithoutVotesInput {
  create?: Maybe<LinkCreateWithoutVotesInput>;
  update?: Maybe<LinkUpdateWithoutVotesDataInput>;
  upsert?: Maybe<LinkUpsertWithoutVotesInput>;
  connect?: Maybe<LinkWhereUniqueInput>;
}

export interface FlightControllerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  postedBy?: Maybe<UserWhereInput>;
  updatedBy?: Maybe<UserWhereInput>;
  merchantLinks_every?: Maybe<FlightControllerMerchantLinkWhereInput>;
  merchantLinks_some?: Maybe<FlightControllerMerchantLinkWhereInput>;
  merchantLinks_none?: Maybe<FlightControllerMerchantLinkWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  disabled_not?: Maybe<Boolean>;
  releaseDate?: Maybe<DateTimeInput>;
  releaseDate_not?: Maybe<DateTimeInput>;
  releaseDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  releaseDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  releaseDate_lt?: Maybe<DateTimeInput>;
  releaseDate_lte?: Maybe<DateTimeInput>;
  releaseDate_gt?: Maybe<DateTimeInput>;
  releaseDate_gte?: Maybe<DateTimeInput>;
  uarts?: Maybe<Int>;
  uarts_not?: Maybe<Int>;
  uarts_in?: Maybe<Int[] | Int>;
  uarts_not_in?: Maybe<Int[] | Int>;
  uarts_lt?: Maybe<Int>;
  uarts_lte?: Maybe<Int>;
  uarts_gt?: Maybe<Int>;
  uarts_gte?: Maybe<Int>;
  gyroOne?: Maybe<Float>;
  gyroOne_not?: Maybe<Float>;
  gyroOne_in?: Maybe<Float[] | Float>;
  gyroOne_not_in?: Maybe<Float[] | Float>;
  gyroOne_lt?: Maybe<Float>;
  gyroOne_lte?: Maybe<Float>;
  gyroOne_gt?: Maybe<Float>;
  gyroOne_gte?: Maybe<Float>;
  gyroTwo?: Maybe<Float>;
  gyroTwo_not?: Maybe<Float>;
  gyroTwo_in?: Maybe<Float[] | Float>;
  gyroTwo_not_in?: Maybe<Float[] | Float>;
  gyroTwo_lt?: Maybe<Float>;
  gyroTwo_lte?: Maybe<Float>;
  gyroTwo_gt?: Maybe<Float>;
  gyroTwo_gte?: Maybe<Float>;
  weightInGrams?: Maybe<Float>;
  weightInGrams_not?: Maybe<Float>;
  weightInGrams_in?: Maybe<Float[] | Float>;
  weightInGrams_not_in?: Maybe<Float[] | Float>;
  weightInGrams_lt?: Maybe<Float>;
  weightInGrams_lte?: Maybe<Float>;
  weightInGrams_gt?: Maybe<Float>;
  weightInGrams_gte?: Maybe<Float>;
  cpu?: Maybe<String>;
  cpu_not?: Maybe<String>;
  cpu_in?: Maybe<String[] | String>;
  cpu_not_in?: Maybe<String[] | String>;
  cpu_lt?: Maybe<String>;
  cpu_lte?: Maybe<String>;
  cpu_gt?: Maybe<String>;
  cpu_gte?: Maybe<String>;
  cpu_contains?: Maybe<String>;
  cpu_not_contains?: Maybe<String>;
  cpu_starts_with?: Maybe<String>;
  cpu_not_starts_with?: Maybe<String>;
  cpu_ends_with?: Maybe<String>;
  cpu_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  dimensions?: Maybe<String>;
  dimensions_not?: Maybe<String>;
  dimensions_in?: Maybe<String[] | String>;
  dimensions_not_in?: Maybe<String[] | String>;
  dimensions_lt?: Maybe<String>;
  dimensions_lte?: Maybe<String>;
  dimensions_gt?: Maybe<String>;
  dimensions_gte?: Maybe<String>;
  dimensions_contains?: Maybe<String>;
  dimensions_not_contains?: Maybe<String>;
  dimensions_starts_with?: Maybe<String>;
  dimensions_not_starts_with?: Maybe<String>;
  dimensions_ends_with?: Maybe<String>;
  dimensions_not_ends_with?: Maybe<String>;
  holePattern?: Maybe<String>;
  holePattern_not?: Maybe<String>;
  holePattern_in?: Maybe<String[] | String>;
  holePattern_not_in?: Maybe<String[] | String>;
  holePattern_lt?: Maybe<String>;
  holePattern_lte?: Maybe<String>;
  holePattern_gt?: Maybe<String>;
  holePattern_gte?: Maybe<String>;
  holePattern_contains?: Maybe<String>;
  holePattern_not_contains?: Maybe<String>;
  holePattern_starts_with?: Maybe<String>;
  holePattern_not_starts_with?: Maybe<String>;
  holePattern_ends_with?: Maybe<String>;
  holePattern_not_ends_with?: Maybe<String>;
  voltageInputMin?: Maybe<Float>;
  voltageInputMin_not?: Maybe<Float>;
  voltageInputMin_in?: Maybe<Float[] | Float>;
  voltageInputMin_not_in?: Maybe<Float[] | Float>;
  voltageInputMin_lt?: Maybe<Float>;
  voltageInputMin_lte?: Maybe<Float>;
  voltageInputMin_gt?: Maybe<Float>;
  voltageInputMin_gte?: Maybe<Float>;
  voltageInputMax?: Maybe<Float>;
  voltageInputMax_not?: Maybe<Float>;
  voltageInputMax_in?: Maybe<Float[] | Float>;
  voltageInputMax_not_in?: Maybe<Float[] | Float>;
  voltageInputMax_lt?: Maybe<Float>;
  voltageInputMax_lte?: Maybe<Float>;
  voltageInputMax_gt?: Maybe<Float>;
  voltageInputMax_gte?: Maybe<Float>;
  osd?: Maybe<Boolean>;
  osd_not?: Maybe<Boolean>;
  accelerometer?: Maybe<Boolean>;
  accelerometer_not?: Maybe<Boolean>;
  barometer?: Maybe<Boolean>;
  barometer_not?: Maybe<Boolean>;
  spektrumPort?: Maybe<Boolean>;
  spektrumPort_not?: Maybe<Boolean>;
  usbInterface?: Maybe<Boolean>;
  usbInterface_not?: Maybe<Boolean>;
  ledWS2812Support?: Maybe<Boolean>;
  ledWS2812Support_not?: Maybe<Boolean>;
  rssiPad?: Maybe<Boolean>;
  rssiPad_not?: Maybe<Boolean>;
  currentSensor?: Maybe<Boolean>;
  currentSensor_not?: Maybe<Boolean>;
  beeperPad?: Maybe<Boolean>;
  beeperPad_not?: Maybe<Boolean>;
  beeperOnBoard?: Maybe<Boolean>;
  beeperOnBoard_not?: Maybe<Boolean>;
  antiVibrationGrommets?: Maybe<Boolean>;
  antiVibrationGrommets_not?: Maybe<Boolean>;
  builtInReceiver?: Maybe<String>;
  builtInReceiver_not?: Maybe<String>;
  builtInReceiver_in?: Maybe<String[] | String>;
  builtInReceiver_not_in?: Maybe<String[] | String>;
  builtInReceiver_lt?: Maybe<String>;
  builtInReceiver_lte?: Maybe<String>;
  builtInReceiver_gt?: Maybe<String>;
  builtInReceiver_gte?: Maybe<String>;
  builtInReceiver_contains?: Maybe<String>;
  builtInReceiver_not_contains?: Maybe<String>;
  builtInReceiver_starts_with?: Maybe<String>;
  builtInReceiver_not_starts_with?: Maybe<String>;
  builtInReceiver_ends_with?: Maybe<String>;
  builtInReceiver_not_ends_with?: Maybe<String>;
  threeVoltOutput?: Maybe<Boolean>;
  threeVoltOutput_not?: Maybe<Boolean>;
  fiveVoltOut?: Maybe<Boolean>;
  fiveVoltOut_not?: Maybe<Boolean>;
  cameraControl?: Maybe<Boolean>;
  cameraControl_not?: Maybe<Boolean>;
  AND?: Maybe<FlightControllerWhereInput[] | FlightControllerWhereInput>;
  OR?: Maybe<FlightControllerWhereInput[] | FlightControllerWhereInput>;
  NOT?: Maybe<FlightControllerWhereInput[] | FlightControllerWhereInput>;
}

export interface LinkUpdateWithoutVotesDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneWithoutLinksInput>;
}

export interface MerchantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  postedBy?: Maybe<UserWhereInput>;
  updatedBy?: Maybe<UserWhereInput>;
  flightControllers_every?: Maybe<FlightControllerMerchantLinkWhereInput>;
  flightControllers_some?: Maybe<FlightControllerMerchantLinkWhereInput>;
  flightControllers_none?: Maybe<FlightControllerMerchantLinkWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  affiliateId?: Maybe<String>;
  affiliateId_not?: Maybe<String>;
  affiliateId_in?: Maybe<String[] | String>;
  affiliateId_not_in?: Maybe<String[] | String>;
  affiliateId_lt?: Maybe<String>;
  affiliateId_lte?: Maybe<String>;
  affiliateId_gt?: Maybe<String>;
  affiliateId_gte?: Maybe<String>;
  affiliateId_contains?: Maybe<String>;
  affiliateId_not_contains?: Maybe<String>;
  affiliateId_starts_with?: Maybe<String>;
  affiliateId_not_starts_with?: Maybe<String>;
  affiliateId_ends_with?: Maybe<String>;
  affiliateId_not_ends_with?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  disabled_not?: Maybe<Boolean>;
  AND?: Maybe<MerchantWhereInput[] | MerchantWhereInput>;
  OR?: Maybe<MerchantWhereInput[] | MerchantWhereInput>;
  NOT?: Maybe<MerchantWhereInput[] | MerchantWhereInput>;
}

export interface FlightControllerMerchantLinkCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  merchant: MerchantCreateOneWithoutFlightControllersInput;
  flightController: FlightControllerCreateOneWithoutMerchantLinksInput;
  url: String;
  price: Float;
  inStock?: Maybe<Boolean>;
}

export interface UserUpsertWithoutEditedFlightControllersInput {
  update: UserUpdateWithoutEditedFlightControllersDataInput;
  create: UserCreateWithoutEditedFlightControllersInput;
}

export interface FlightControllerUpdateInput {
  postedBy?: Maybe<UserUpdateOneWithoutFlightControllersInput>;
  updatedBy?: Maybe<UserUpdateOneWithoutEditedFlightControllersInput>;
  merchantLinks?: Maybe<
    FlightControllerMerchantLinkUpdateManyWithoutFlightControllerInput
  >;
  name?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  releaseDate?: Maybe<DateTimeInput>;
  uarts?: Maybe<Int>;
  gyroOne?: Maybe<Float>;
  gyroTwo?: Maybe<Float>;
  weightInGrams?: Maybe<Float>;
  cpu?: Maybe<String>;
  description?: Maybe<String>;
  dimensions?: Maybe<String>;
  holePattern?: Maybe<String>;
  voltageInputMin?: Maybe<Float>;
  voltageInputMax?: Maybe<Float>;
  osd?: Maybe<Boolean>;
  accelerometer?: Maybe<Boolean>;
  barometer?: Maybe<Boolean>;
  spektrumPort?: Maybe<Boolean>;
  usbInterface?: Maybe<Boolean>;
  ledWS2812Support?: Maybe<Boolean>;
  rssiPad?: Maybe<Boolean>;
  currentSensor?: Maybe<Boolean>;
  beeperPad?: Maybe<Boolean>;
  beeperOnBoard?: Maybe<Boolean>;
  antiVibrationGrommets?: Maybe<Boolean>;
  builtInReceiver?: Maybe<String>;
  threeVoltOutput?: Maybe<Boolean>;
  fiveVoltOut?: Maybe<Boolean>;
  cameraControl?: Maybe<Boolean>;
}

export interface UserUpdateOneWithoutLinksInput {
  create?: Maybe<UserCreateWithoutLinksInput>;
  update?: Maybe<UserUpdateWithoutLinksDataInput>;
  upsert?: Maybe<UserUpsertWithoutLinksInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateOneWithoutFlightControllersInput {
  create?: Maybe<UserCreateWithoutFlightControllersInput>;
  update?: Maybe<UserUpdateWithoutFlightControllersDataInput>;
  upsert?: Maybe<UserUpsertWithoutFlightControllersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VoteWhereInput>;
  AND?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  OR?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  NOT?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
}

export interface UserUpdateWithoutFlightControllersDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  editedFlightControllers?: Maybe<
    FlightControllerUpdateManyWithoutUpdatedByInput
  >;
  addedMerchants?: Maybe<MerchantUpdateManyWithoutPostedByInput>;
  editedMerchants?: Maybe<MerchantUpdateManyWithoutUpdatedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkUpdateManyWithoutPostedByInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface LinkUpdateManyWithoutPostedByInput {
  create?: Maybe<
    LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput
  >;
  delete?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  set?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  disconnect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  update?: Maybe<
    | LinkUpdateWithWhereUniqueWithoutPostedByInput[]
    | LinkUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | LinkUpsertWithWhereUniqueWithoutPostedByInput[]
    | LinkUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  updateMany?: Maybe<
    LinkUpdateManyWithWhereNestedInput[] | LinkUpdateManyWithWhereNestedInput
  >;
}

export interface MerchantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MerchantWhereInput>;
  AND?: Maybe<
    MerchantSubscriptionWhereInput[] | MerchantSubscriptionWhereInput
  >;
  OR?: Maybe<MerchantSubscriptionWhereInput[] | MerchantSubscriptionWhereInput>;
  NOT?: Maybe<
    MerchantSubscriptionWhereInput[] | MerchantSubscriptionWhereInput
  >;
}

export interface LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  data: LinkUpdateWithoutPostedByDataInput;
}

export interface FlightControllerMerchantLinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FlightControllerMerchantLinkWhereInput>;
  AND?: Maybe<
    | FlightControllerMerchantLinkSubscriptionWhereInput[]
    | FlightControllerMerchantLinkSubscriptionWhereInput
  >;
  OR?: Maybe<
    | FlightControllerMerchantLinkSubscriptionWhereInput[]
    | FlightControllerMerchantLinkSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | FlightControllerMerchantLinkSubscriptionWhereInput[]
    | FlightControllerMerchantLinkSubscriptionWhereInput
  >;
}

export interface LinkUpdateWithoutPostedByDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
  votes?: Maybe<VoteUpdateManyWithoutLinkInput>;
}

export interface VoteUpdateInput {
  link?: Maybe<LinkUpdateOneRequiredWithoutVotesInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
}

export interface VoteUpdateManyWithoutLinkInput {
  create?: Maybe<VoteCreateWithoutLinkInput[] | VoteCreateWithoutLinkInput>;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutLinkInput[]
    | VoteUpdateWithWhereUniqueWithoutLinkInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutLinkInput[]
    | VoteUpsertWithWhereUniqueWithoutLinkInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface VoteUpdateWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutLinkDataInput;
}

export type FlightControllerMerchantLinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VoteUpdateWithoutLinkDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
}

export interface MerchantUpdateManyMutationInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  affiliateId?: Maybe<String>;
  disabled?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  update?: Maybe<UserUpdateWithoutVotesDataInput>;
  upsert?: Maybe<UserUpsertWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type LinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateWithoutVotesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  flightControllers?: Maybe<FlightControllerUpdateManyWithoutPostedByInput>;
  editedFlightControllers?: Maybe<
    FlightControllerUpdateManyWithoutUpdatedByInput
  >;
  addedMerchants?: Maybe<MerchantUpdateManyWithoutPostedByInput>;
  editedMerchants?: Maybe<MerchantUpdateManyWithoutUpdatedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkUpdateManyWithoutPostedByInput
  >;
}

export interface LinkUpdateManyMutationInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface FlightControllerUpdateManyWithoutPostedByInput {
  create?: Maybe<
    | FlightControllerCreateWithoutPostedByInput[]
    | FlightControllerCreateWithoutPostedByInput
  >;
  delete?: Maybe<
    FlightControllerWhereUniqueInput[] | FlightControllerWhereUniqueInput
  >;
  connect?: Maybe<
    FlightControllerWhereUniqueInput[] | FlightControllerWhereUniqueInput
  >;
  set?: Maybe<
    FlightControllerWhereUniqueInput[] | FlightControllerWhereUniqueInput
  >;
  disconnect?: Maybe<
    FlightControllerWhereUniqueInput[] | FlightControllerWhereUniqueInput
  >;
  update?: Maybe<
    | FlightControllerUpdateWithWhereUniqueWithoutPostedByInput[]
    | FlightControllerUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | FlightControllerUpsertWithWhereUniqueWithoutPostedByInput[]
    | FlightControllerUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<
    FlightControllerScalarWhereInput[] | FlightControllerScalarWhereInput
  >;
  updateMany?: Maybe<
    | FlightControllerUpdateManyWithWhereNestedInput[]
    | FlightControllerUpdateManyWithWhereNestedInput
  >;
}

export type MerchantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FlightControllerUpdateWithWhereUniqueWithoutPostedByInput {
  where: FlightControllerWhereUniqueInput;
  data: FlightControllerUpdateWithoutPostedByDataInput;
}

export interface FlightControllerMerchantLinkUpdateManyMutationInput {
  url?: Maybe<String>;
  price?: Maybe<Float>;
  inStock?: Maybe<Boolean>;
}

export interface FlightControllerUpdateWithoutPostedByDataInput {
  updatedBy?: Maybe<UserUpdateOneWithoutEditedFlightControllersInput>;
  merchantLinks?: Maybe<
    FlightControllerMerchantLinkUpdateManyWithoutFlightControllerInput
  >;
  name?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  releaseDate?: Maybe<DateTimeInput>;
  uarts?: Maybe<Int>;
  gyroOne?: Maybe<Float>;
  gyroTwo?: Maybe<Float>;
  weightInGrams?: Maybe<Float>;
  cpu?: Maybe<String>;
  description?: Maybe<String>;
  dimensions?: Maybe<String>;
  holePattern?: Maybe<String>;
  voltageInputMin?: Maybe<Float>;
  voltageInputMax?: Maybe<Float>;
  osd?: Maybe<Boolean>;
  accelerometer?: Maybe<Boolean>;
  barometer?: Maybe<Boolean>;
  spektrumPort?: Maybe<Boolean>;
  usbInterface?: Maybe<Boolean>;
  ledWS2812Support?: Maybe<Boolean>;
  rssiPad?: Maybe<Boolean>;
  currentSensor?: Maybe<Boolean>;
  beeperPad?: Maybe<Boolean>;
  beeperOnBoard?: Maybe<Boolean>;
  antiVibrationGrommets?: Maybe<Boolean>;
  builtInReceiver?: Maybe<String>;
  threeVoltOutput?: Maybe<Boolean>;
  fiveVoltOut?: Maybe<Boolean>;
  cameraControl?: Maybe<Boolean>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface VoteUpsertWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutLinkDataInput;
  create: VoteCreateWithoutLinkInput;
}

export interface FlightControllerUpdateManyMutationInput {
  name?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  releaseDate?: Maybe<DateTimeInput>;
  uarts?: Maybe<Int>;
  gyroOne?: Maybe<Float>;
  gyroTwo?: Maybe<Float>;
  weightInGrams?: Maybe<Float>;
  cpu?: Maybe<String>;
  description?: Maybe<String>;
  dimensions?: Maybe<String>;
  holePattern?: Maybe<String>;
  voltageInputMin?: Maybe<Float>;
  voltageInputMax?: Maybe<Float>;
  osd?: Maybe<Boolean>;
  accelerometer?: Maybe<Boolean>;
  barometer?: Maybe<Boolean>;
  spektrumPort?: Maybe<Boolean>;
  usbInterface?: Maybe<Boolean>;
  ledWS2812Support?: Maybe<Boolean>;
  rssiPad?: Maybe<Boolean>;
  currentSensor?: Maybe<Boolean>;
  beeperPad?: Maybe<Boolean>;
  beeperOnBoard?: Maybe<Boolean>;
  antiVibrationGrommets?: Maybe<Boolean>;
  builtInReceiver?: Maybe<String>;
  threeVoltOutput?: Maybe<Boolean>;
  fiveVoltOut?: Maybe<Boolean>;
  cameraControl?: Maybe<Boolean>;
}

export interface UserUpdateWithoutEditedFlightControllersDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  flightControllers?: Maybe<FlightControllerUpdateManyWithoutPostedByInput>;
  addedMerchants?: Maybe<MerchantUpdateManyWithoutPostedByInput>;
  editedMerchants?: Maybe<MerchantUpdateManyWithoutUpdatedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkUpdateManyWithoutPostedByInput
  >;
}

export interface LinkUpdateManyDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface VoteUpdateManyWithoutUserInput {
  create?: Maybe<VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput>;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutUserInput[]
    | VoteUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutUserInput[]
    | VoteUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput;
  data: LinkUpdateManyDataInput;
}

export interface VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutUserDataInput;
}

export interface LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  update: LinkUpdateWithoutPostedByDataInput;
  create: LinkCreateWithoutPostedByInput;
}

export interface VoteUpdateWithoutUserDataInput {
  link?: Maybe<LinkUpdateOneRequiredWithoutVotesInput>;
}

export interface FlightControllerCreateInput {
  id?: Maybe<ID_Input>;
  postedBy?: Maybe<UserCreateOneWithoutFlightControllersInput>;
  updatedBy?: Maybe<UserCreateOneWithoutEditedFlightControllersInput>;
  merchantLinks?: Maybe<
    FlightControllerMerchantLinkCreateManyWithoutFlightControllerInput
  >;
  name?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  releaseDate?: Maybe<DateTimeInput>;
  uarts?: Maybe<Int>;
  gyroOne?: Maybe<Float>;
  gyroTwo?: Maybe<Float>;
  weightInGrams?: Maybe<Float>;
  cpu?: Maybe<String>;
  description?: Maybe<String>;
  dimensions?: Maybe<String>;
  holePattern?: Maybe<String>;
  voltageInputMin?: Maybe<Float>;
  voltageInputMax?: Maybe<Float>;
  osd?: Maybe<Boolean>;
  accelerometer?: Maybe<Boolean>;
  barometer?: Maybe<Boolean>;
  spektrumPort?: Maybe<Boolean>;
  usbInterface?: Maybe<Boolean>;
  ledWS2812Support?: Maybe<Boolean>;
  rssiPad?: Maybe<Boolean>;
  currentSensor?: Maybe<Boolean>;
  beeperPad?: Maybe<Boolean>;
  beeperOnBoard?: Maybe<Boolean>;
  antiVibrationGrommets?: Maybe<Boolean>;
  builtInReceiver?: Maybe<String>;
  threeVoltOutput?: Maybe<Boolean>;
  fiveVoltOut?: Maybe<Boolean>;
  cameraControl?: Maybe<Boolean>;
}

export interface FlightControllerMerchantLinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  merchant?: Maybe<MerchantWhereInput>;
  flightController?: Maybe<FlightControllerWhereInput>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  inStock?: Maybe<Boolean>;
  inStock_not?: Maybe<Boolean>;
  postedBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    | FlightControllerMerchantLinkWhereInput[]
    | FlightControllerMerchantLinkWhereInput
  >;
  OR?: Maybe<
    | FlightControllerMerchantLinkWhereInput[]
    | FlightControllerMerchantLinkWhereInput
  >;
  NOT?: Maybe<
    | FlightControllerMerchantLinkWhereInput[]
    | FlightControllerMerchantLinkWhereInput
  >;
}

export interface UserCreateWithoutFlightControllersInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  editedFlightControllers?: Maybe<
    FlightControllerCreateManyWithoutUpdatedByInput
  >;
  addedMerchants?: Maybe<MerchantCreateManyWithoutPostedByInput>;
  editedMerchants?: Maybe<MerchantCreateManyWithoutUpdatedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkCreateManyWithoutPostedByInput
  >;
}

export interface UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput;
  create: UserCreateWithoutVotesInput;
}

export interface LinkCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
  votes?: Maybe<VoteCreateManyWithoutLinkInput>;
}

export interface FlightControllerUpsertWithWhereUniqueWithoutPostedByInput {
  where: FlightControllerWhereUniqueInput;
  update: FlightControllerUpdateWithoutPostedByDataInput;
  create: FlightControllerCreateWithoutPostedByInput;
}

export interface VoteCreateWithoutLinkInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutVotesInput;
}

export interface UserUpdateWithoutLinksDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  flightControllers?: Maybe<FlightControllerUpdateManyWithoutPostedByInput>;
  editedFlightControllers?: Maybe<
    FlightControllerUpdateManyWithoutUpdatedByInput
  >;
  addedMerchants?: Maybe<MerchantUpdateManyWithoutPostedByInput>;
  editedMerchants?: Maybe<MerchantUpdateManyWithoutUpdatedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkUpdateManyWithoutPostedByInput
  >;
}

export interface UserCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  flightControllers?: Maybe<FlightControllerCreateManyWithoutPostedByInput>;
  editedFlightControllers?: Maybe<
    FlightControllerCreateManyWithoutUpdatedByInput
  >;
  addedMerchants?: Maybe<MerchantCreateManyWithoutPostedByInput>;
  editedMerchants?: Maybe<MerchantCreateManyWithoutUpdatedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkCreateManyWithoutPostedByInput
  >;
}

export interface FlightControllerUpdateManyWithoutUpdatedByInput {
  create?: Maybe<
    | FlightControllerCreateWithoutUpdatedByInput[]
    | FlightControllerCreateWithoutUpdatedByInput
  >;
  delete?: Maybe<
    FlightControllerWhereUniqueInput[] | FlightControllerWhereUniqueInput
  >;
  connect?: Maybe<
    FlightControllerWhereUniqueInput[] | FlightControllerWhereUniqueInput
  >;
  set?: Maybe<
    FlightControllerWhereUniqueInput[] | FlightControllerWhereUniqueInput
  >;
  disconnect?: Maybe<
    FlightControllerWhereUniqueInput[] | FlightControllerWhereUniqueInput
  >;
  update?: Maybe<
    | FlightControllerUpdateWithWhereUniqueWithoutUpdatedByInput[]
    | FlightControllerUpdateWithWhereUniqueWithoutUpdatedByInput
  >;
  upsert?: Maybe<
    | FlightControllerUpsertWithWhereUniqueWithoutUpdatedByInput[]
    | FlightControllerUpsertWithWhereUniqueWithoutUpdatedByInput
  >;
  deleteMany?: Maybe<
    FlightControllerScalarWhereInput[] | FlightControllerScalarWhereInput
  >;
  updateMany?: Maybe<
    | FlightControllerUpdateManyWithWhereNestedInput[]
    | FlightControllerUpdateManyWithWhereNestedInput
  >;
}

export interface FlightControllerCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  updatedBy?: Maybe<UserCreateOneWithoutEditedFlightControllersInput>;
  merchantLinks?: Maybe<
    FlightControllerMerchantLinkCreateManyWithoutFlightControllerInput
  >;
  name?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  releaseDate?: Maybe<DateTimeInput>;
  uarts?: Maybe<Int>;
  gyroOne?: Maybe<Float>;
  gyroTwo?: Maybe<Float>;
  weightInGrams?: Maybe<Float>;
  cpu?: Maybe<String>;
  description?: Maybe<String>;
  dimensions?: Maybe<String>;
  holePattern?: Maybe<String>;
  voltageInputMin?: Maybe<Float>;
  voltageInputMax?: Maybe<Float>;
  osd?: Maybe<Boolean>;
  accelerometer?: Maybe<Boolean>;
  barometer?: Maybe<Boolean>;
  spektrumPort?: Maybe<Boolean>;
  usbInterface?: Maybe<Boolean>;
  ledWS2812Support?: Maybe<Boolean>;
  rssiPad?: Maybe<Boolean>;
  currentSensor?: Maybe<Boolean>;
  beeperPad?: Maybe<Boolean>;
  beeperOnBoard?: Maybe<Boolean>;
  antiVibrationGrommets?: Maybe<Boolean>;
  builtInReceiver?: Maybe<String>;
  threeVoltOutput?: Maybe<Boolean>;
  fiveVoltOut?: Maybe<Boolean>;
  cameraControl?: Maybe<Boolean>;
}

export interface FlightControllerUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: FlightControllerWhereUniqueInput;
  data: FlightControllerUpdateWithoutUpdatedByDataInput;
}

export interface UserCreateWithoutEditedFlightControllersInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  flightControllers?: Maybe<FlightControllerCreateManyWithoutPostedByInput>;
  addedMerchants?: Maybe<MerchantCreateManyWithoutPostedByInput>;
  editedMerchants?: Maybe<MerchantCreateManyWithoutUpdatedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkCreateManyWithoutPostedByInput
  >;
}

export interface FlightControllerUpdateWithoutUpdatedByDataInput {
  postedBy?: Maybe<UserUpdateOneWithoutFlightControllersInput>;
  merchantLinks?: Maybe<
    FlightControllerMerchantLinkUpdateManyWithoutFlightControllerInput
  >;
  name?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  releaseDate?: Maybe<DateTimeInput>;
  uarts?: Maybe<Int>;
  gyroOne?: Maybe<Float>;
  gyroTwo?: Maybe<Float>;
  weightInGrams?: Maybe<Float>;
  cpu?: Maybe<String>;
  description?: Maybe<String>;
  dimensions?: Maybe<String>;
  holePattern?: Maybe<String>;
  voltageInputMin?: Maybe<Float>;
  voltageInputMax?: Maybe<Float>;
  osd?: Maybe<Boolean>;
  accelerometer?: Maybe<Boolean>;
  barometer?: Maybe<Boolean>;
  spektrumPort?: Maybe<Boolean>;
  usbInterface?: Maybe<Boolean>;
  ledWS2812Support?: Maybe<Boolean>;
  rssiPad?: Maybe<Boolean>;
  currentSensor?: Maybe<Boolean>;
  beeperPad?: Maybe<Boolean>;
  beeperOnBoard?: Maybe<Boolean>;
  antiVibrationGrommets?: Maybe<Boolean>;
  builtInReceiver?: Maybe<String>;
  threeVoltOutput?: Maybe<Boolean>;
  fiveVoltOut?: Maybe<Boolean>;
  cameraControl?: Maybe<Boolean>;
}

export interface VoteCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  link: LinkCreateOneWithoutVotesInput;
}

export interface FlightControllerMerchantLinkUpdateManyWithoutFlightControllerInput {
  create?: Maybe<
    | FlightControllerMerchantLinkCreateWithoutFlightControllerInput[]
    | FlightControllerMerchantLinkCreateWithoutFlightControllerInput
  >;
  delete?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
  connect?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
  set?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
  disconnect?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
  update?: Maybe<
    | FlightControllerMerchantLinkUpdateWithWhereUniqueWithoutFlightControllerInput[]
    | FlightControllerMerchantLinkUpdateWithWhereUniqueWithoutFlightControllerInput
  >;
  upsert?: Maybe<
    | FlightControllerMerchantLinkUpsertWithWhereUniqueWithoutFlightControllerInput[]
    | FlightControllerMerchantLinkUpsertWithWhereUniqueWithoutFlightControllerInput
  >;
  deleteMany?: Maybe<
    | FlightControllerMerchantLinkScalarWhereInput[]
    | FlightControllerMerchantLinkScalarWhereInput
  >;
  updateMany?: Maybe<
    | FlightControllerMerchantLinkUpdateManyWithWhereNestedInput[]
    | FlightControllerMerchantLinkUpdateManyWithWhereNestedInput
  >;
}

export interface LinkCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
  postedBy?: Maybe<UserCreateOneWithoutLinksInput>;
}

export interface FlightControllerMerchantLinkUpdateWithWhereUniqueWithoutFlightControllerInput {
  where: FlightControllerMerchantLinkWhereUniqueInput;
  data: FlightControllerMerchantLinkUpdateWithoutFlightControllerDataInput;
}

export interface UserCreateWithoutLinksInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  flightControllers?: Maybe<FlightControllerCreateManyWithoutPostedByInput>;
  editedFlightControllers?: Maybe<
    FlightControllerCreateManyWithoutUpdatedByInput
  >;
  addedMerchants?: Maybe<MerchantCreateManyWithoutPostedByInput>;
  editedMerchants?: Maybe<MerchantCreateManyWithoutUpdatedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkCreateManyWithoutPostedByInput
  >;
}

export interface FlightControllerMerchantLinkUpdateWithoutFlightControllerDataInput {
  merchant?: Maybe<MerchantUpdateOneRequiredWithoutFlightControllersInput>;
  url?: Maybe<String>;
  price?: Maybe<Float>;
  inStock?: Maybe<Boolean>;
  postedBy?: Maybe<UserUpdateOneRequiredWithoutAddedFlightControllersInput>;
}

export interface FlightControllerCreateWithoutUpdatedByInput {
  id?: Maybe<ID_Input>;
  postedBy?: Maybe<UserCreateOneWithoutFlightControllersInput>;
  merchantLinks?: Maybe<
    FlightControllerMerchantLinkCreateManyWithoutFlightControllerInput
  >;
  name?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  releaseDate?: Maybe<DateTimeInput>;
  uarts?: Maybe<Int>;
  gyroOne?: Maybe<Float>;
  gyroTwo?: Maybe<Float>;
  weightInGrams?: Maybe<Float>;
  cpu?: Maybe<String>;
  description?: Maybe<String>;
  dimensions?: Maybe<String>;
  holePattern?: Maybe<String>;
  voltageInputMin?: Maybe<Float>;
  voltageInputMax?: Maybe<Float>;
  osd?: Maybe<Boolean>;
  accelerometer?: Maybe<Boolean>;
  barometer?: Maybe<Boolean>;
  spektrumPort?: Maybe<Boolean>;
  usbInterface?: Maybe<Boolean>;
  ledWS2812Support?: Maybe<Boolean>;
  rssiPad?: Maybe<Boolean>;
  currentSensor?: Maybe<Boolean>;
  beeperPad?: Maybe<Boolean>;
  beeperOnBoard?: Maybe<Boolean>;
  antiVibrationGrommets?: Maybe<Boolean>;
  builtInReceiver?: Maybe<String>;
  threeVoltOutput?: Maybe<Boolean>;
  fiveVoltOut?: Maybe<Boolean>;
  cameraControl?: Maybe<Boolean>;
}

export interface MerchantUpdateOneRequiredWithoutFlightControllersInput {
  create?: Maybe<MerchantCreateWithoutFlightControllersInput>;
  update?: Maybe<MerchantUpdateWithoutFlightControllersDataInput>;
  upsert?: Maybe<MerchantUpsertWithoutFlightControllersInput>;
  connect?: Maybe<MerchantWhereUniqueInput>;
}

export interface FlightControllerMerchantLinkCreateWithoutFlightControllerInput {
  id?: Maybe<ID_Input>;
  merchant: MerchantCreateOneWithoutFlightControllersInput;
  url: String;
  price: Float;
  inStock?: Maybe<Boolean>;
  postedBy: UserCreateOneWithoutAddedFlightControllersInput;
}

export interface MerchantUpdateWithoutFlightControllersDataInput {
  postedBy?: Maybe<UserUpdateOneWithoutAddedMerchantsInput>;
  updatedBy?: Maybe<UserUpdateOneWithoutEditedMerchantsInput>;
  name?: Maybe<String>;
  url?: Maybe<String>;
  affiliateId?: Maybe<String>;
  disabled?: Maybe<Boolean>;
}

export interface MerchantCreateWithoutFlightControllersInput {
  id?: Maybe<ID_Input>;
  postedBy?: Maybe<UserCreateOneWithoutAddedMerchantsInput>;
  updatedBy?: Maybe<UserCreateOneWithoutEditedMerchantsInput>;
  name?: Maybe<String>;
  url?: Maybe<String>;
  affiliateId?: Maybe<String>;
  disabled?: Maybe<Boolean>;
}

export interface UserUpdateOneWithoutAddedMerchantsInput {
  create?: Maybe<UserCreateWithoutAddedMerchantsInput>;
  update?: Maybe<UserUpdateWithoutAddedMerchantsDataInput>;
  upsert?: Maybe<UserUpsertWithoutAddedMerchantsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAddedMerchantsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  flightControllers?: Maybe<FlightControllerCreateManyWithoutPostedByInput>;
  editedFlightControllers?: Maybe<
    FlightControllerCreateManyWithoutUpdatedByInput
  >;
  editedMerchants?: Maybe<MerchantCreateManyWithoutUpdatedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkCreateManyWithoutPostedByInput
  >;
}

export interface UserUpdateWithoutAddedMerchantsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  flightControllers?: Maybe<FlightControllerUpdateManyWithoutPostedByInput>;
  editedFlightControllers?: Maybe<
    FlightControllerUpdateManyWithoutUpdatedByInput
  >;
  editedMerchants?: Maybe<MerchantUpdateManyWithoutUpdatedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkUpdateManyWithoutPostedByInput
  >;
}

export interface MerchantCreateWithoutUpdatedByInput {
  id?: Maybe<ID_Input>;
  postedBy?: Maybe<UserCreateOneWithoutAddedMerchantsInput>;
  flightControllers?: Maybe<
    FlightControllerMerchantLinkCreateManyWithoutMerchantInput
  >;
  name?: Maybe<String>;
  url?: Maybe<String>;
  affiliateId?: Maybe<String>;
  disabled?: Maybe<Boolean>;
}

export interface MerchantUpdateManyWithoutUpdatedByInput {
  create?: Maybe<
    MerchantCreateWithoutUpdatedByInput[] | MerchantCreateWithoutUpdatedByInput
  >;
  delete?: Maybe<MerchantWhereUniqueInput[] | MerchantWhereUniqueInput>;
  connect?: Maybe<MerchantWhereUniqueInput[] | MerchantWhereUniqueInput>;
  set?: Maybe<MerchantWhereUniqueInput[] | MerchantWhereUniqueInput>;
  disconnect?: Maybe<MerchantWhereUniqueInput[] | MerchantWhereUniqueInput>;
  update?: Maybe<
    | MerchantUpdateWithWhereUniqueWithoutUpdatedByInput[]
    | MerchantUpdateWithWhereUniqueWithoutUpdatedByInput
  >;
  upsert?: Maybe<
    | MerchantUpsertWithWhereUniqueWithoutUpdatedByInput[]
    | MerchantUpsertWithWhereUniqueWithoutUpdatedByInput
  >;
  deleteMany?: Maybe<MerchantScalarWhereInput[] | MerchantScalarWhereInput>;
  updateMany?: Maybe<
    | MerchantUpdateManyWithWhereNestedInput[]
    | MerchantUpdateManyWithWhereNestedInput
  >;
}

export interface FlightControllerMerchantLinkCreateWithoutMerchantInput {
  id?: Maybe<ID_Input>;
  flightController: FlightControllerCreateOneWithoutMerchantLinksInput;
  url: String;
  price: Float;
  inStock?: Maybe<Boolean>;
  postedBy: UserCreateOneWithoutAddedFlightControllersInput;
}

export interface MerchantUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: MerchantWhereUniqueInput;
  data: MerchantUpdateWithoutUpdatedByDataInput;
}

export interface FlightControllerCreateWithoutMerchantLinksInput {
  id?: Maybe<ID_Input>;
  postedBy?: Maybe<UserCreateOneWithoutFlightControllersInput>;
  updatedBy?: Maybe<UserCreateOneWithoutEditedFlightControllersInput>;
  name?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  releaseDate?: Maybe<DateTimeInput>;
  uarts?: Maybe<Int>;
  gyroOne?: Maybe<Float>;
  gyroTwo?: Maybe<Float>;
  weightInGrams?: Maybe<Float>;
  cpu?: Maybe<String>;
  description?: Maybe<String>;
  dimensions?: Maybe<String>;
  holePattern?: Maybe<String>;
  voltageInputMin?: Maybe<Float>;
  voltageInputMax?: Maybe<Float>;
  osd?: Maybe<Boolean>;
  accelerometer?: Maybe<Boolean>;
  barometer?: Maybe<Boolean>;
  spektrumPort?: Maybe<Boolean>;
  usbInterface?: Maybe<Boolean>;
  ledWS2812Support?: Maybe<Boolean>;
  rssiPad?: Maybe<Boolean>;
  currentSensor?: Maybe<Boolean>;
  beeperPad?: Maybe<Boolean>;
  beeperOnBoard?: Maybe<Boolean>;
  antiVibrationGrommets?: Maybe<Boolean>;
  builtInReceiver?: Maybe<String>;
  threeVoltOutput?: Maybe<Boolean>;
  fiveVoltOut?: Maybe<Boolean>;
  cameraControl?: Maybe<Boolean>;
}

export interface MerchantUpdateWithoutUpdatedByDataInput {
  postedBy?: Maybe<UserUpdateOneWithoutAddedMerchantsInput>;
  flightControllers?: Maybe<
    FlightControllerMerchantLinkUpdateManyWithoutMerchantInput
  >;
  name?: Maybe<String>;
  url?: Maybe<String>;
  affiliateId?: Maybe<String>;
  disabled?: Maybe<Boolean>;
}

export interface UserCreateWithoutAddedFlightControllersInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  flightControllers?: Maybe<FlightControllerCreateManyWithoutPostedByInput>;
  editedFlightControllers?: Maybe<
    FlightControllerCreateManyWithoutUpdatedByInput
  >;
  addedMerchants?: Maybe<MerchantCreateManyWithoutPostedByInput>;
  editedMerchants?: Maybe<MerchantCreateManyWithoutUpdatedByInput>;
}

export interface FlightControllerMerchantLinkUpdateManyWithoutMerchantInput {
  create?: Maybe<
    | FlightControllerMerchantLinkCreateWithoutMerchantInput[]
    | FlightControllerMerchantLinkCreateWithoutMerchantInput
  >;
  delete?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
  connect?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
  set?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
  disconnect?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
  update?: Maybe<
    | FlightControllerMerchantLinkUpdateWithWhereUniqueWithoutMerchantInput[]
    | FlightControllerMerchantLinkUpdateWithWhereUniqueWithoutMerchantInput
  >;
  upsert?: Maybe<
    | FlightControllerMerchantLinkUpsertWithWhereUniqueWithoutMerchantInput[]
    | FlightControllerMerchantLinkUpsertWithWhereUniqueWithoutMerchantInput
  >;
  deleteMany?: Maybe<
    | FlightControllerMerchantLinkScalarWhereInput[]
    | FlightControllerMerchantLinkScalarWhereInput
  >;
  updateMany?: Maybe<
    | FlightControllerMerchantLinkUpdateManyWithWhereNestedInput[]
    | FlightControllerMerchantLinkUpdateManyWithWhereNestedInput
  >;
}

export interface MerchantCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  updatedBy?: Maybe<UserCreateOneWithoutEditedMerchantsInput>;
  flightControllers?: Maybe<
    FlightControllerMerchantLinkCreateManyWithoutMerchantInput
  >;
  name?: Maybe<String>;
  url?: Maybe<String>;
  affiliateId?: Maybe<String>;
  disabled?: Maybe<Boolean>;
}

export interface FlightControllerMerchantLinkUpdateWithWhereUniqueWithoutMerchantInput {
  where: FlightControllerMerchantLinkWhereUniqueInput;
  data: FlightControllerMerchantLinkUpdateWithoutMerchantDataInput;
}

export interface UserCreateWithoutEditedMerchantsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  flightControllers?: Maybe<FlightControllerCreateManyWithoutPostedByInput>;
  editedFlightControllers?: Maybe<
    FlightControllerCreateManyWithoutUpdatedByInput
  >;
  addedMerchants?: Maybe<MerchantCreateManyWithoutPostedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkCreateManyWithoutPostedByInput
  >;
}

export interface FlightControllerMerchantLinkUpdateWithoutMerchantDataInput {
  flightController?: Maybe<
    FlightControllerUpdateOneRequiredWithoutMerchantLinksInput
  >;
  url?: Maybe<String>;
  price?: Maybe<Float>;
  inStock?: Maybe<Boolean>;
  postedBy?: Maybe<UserUpdateOneRequiredWithoutAddedFlightControllersInput>;
}

export interface VoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  link?: Maybe<LinkWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  OR?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  NOT?: Maybe<VoteWhereInput[] | VoteWhereInput>;
}

export interface FlightControllerUpdateOneRequiredWithoutMerchantLinksInput {
  create?: Maybe<FlightControllerCreateWithoutMerchantLinksInput>;
  update?: Maybe<FlightControllerUpdateWithoutMerchantLinksDataInput>;
  upsert?: Maybe<FlightControllerUpsertWithoutMerchantLinksInput>;
  connect?: Maybe<FlightControllerWhereUniqueInput>;
}

export interface LinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  postedBy?: Maybe<UserWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  OR?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  NOT?: Maybe<LinkWhereInput[] | LinkWhereInput>;
}

export interface FlightControllerUpdateWithoutMerchantLinksDataInput {
  postedBy?: Maybe<UserUpdateOneWithoutFlightControllersInput>;
  updatedBy?: Maybe<UserUpdateOneWithoutEditedFlightControllersInput>;
  name?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  releaseDate?: Maybe<DateTimeInput>;
  uarts?: Maybe<Int>;
  gyroOne?: Maybe<Float>;
  gyroTwo?: Maybe<Float>;
  weightInGrams?: Maybe<Float>;
  cpu?: Maybe<String>;
  description?: Maybe<String>;
  dimensions?: Maybe<String>;
  holePattern?: Maybe<String>;
  voltageInputMin?: Maybe<Float>;
  voltageInputMax?: Maybe<Float>;
  osd?: Maybe<Boolean>;
  accelerometer?: Maybe<Boolean>;
  barometer?: Maybe<Boolean>;
  spektrumPort?: Maybe<Boolean>;
  usbInterface?: Maybe<Boolean>;
  ledWS2812Support?: Maybe<Boolean>;
  rssiPad?: Maybe<Boolean>;
  currentSensor?: Maybe<Boolean>;
  beeperPad?: Maybe<Boolean>;
  beeperOnBoard?: Maybe<Boolean>;
  antiVibrationGrommets?: Maybe<Boolean>;
  builtInReceiver?: Maybe<String>;
  threeVoltOutput?: Maybe<Boolean>;
  fiveVoltOut?: Maybe<Boolean>;
  cameraControl?: Maybe<Boolean>;
}

export interface FlightControllerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FlightControllerWhereInput>;
  AND?: Maybe<
    | FlightControllerSubscriptionWhereInput[]
    | FlightControllerSubscriptionWhereInput
  >;
  OR?: Maybe<
    | FlightControllerSubscriptionWhereInput[]
    | FlightControllerSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | FlightControllerSubscriptionWhereInput[]
    | FlightControllerSubscriptionWhereInput
  >;
}

export interface FlightControllerUpsertWithoutMerchantLinksInput {
  update: FlightControllerUpdateWithoutMerchantLinksDataInput;
  create: FlightControllerCreateWithoutMerchantLinksInput;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  flightControllers?: Maybe<FlightControllerUpdateManyWithoutPostedByInput>;
  editedFlightControllers?: Maybe<
    FlightControllerUpdateManyWithoutUpdatedByInput
  >;
  addedMerchants?: Maybe<MerchantUpdateManyWithoutPostedByInput>;
  editedMerchants?: Maybe<MerchantUpdateManyWithoutUpdatedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkUpdateManyWithoutPostedByInput
  >;
}

export interface UserUpdateOneRequiredWithoutAddedFlightControllersInput {
  create?: Maybe<UserCreateWithoutAddedFlightControllersInput>;
  update?: Maybe<UserUpdateWithoutAddedFlightControllersDataInput>;
  upsert?: Maybe<UserUpsertWithoutAddedFlightControllersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface MerchantUpdateInput {
  postedBy?: Maybe<UserUpdateOneWithoutAddedMerchantsInput>;
  updatedBy?: Maybe<UserUpdateOneWithoutEditedMerchantsInput>;
  flightControllers?: Maybe<
    FlightControllerMerchantLinkUpdateManyWithoutMerchantInput
  >;
  name?: Maybe<String>;
  url?: Maybe<String>;
  affiliateId?: Maybe<String>;
  disabled?: Maybe<Boolean>;
}

export interface UserUpdateWithoutAddedFlightControllersDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  flightControllers?: Maybe<FlightControllerUpdateManyWithoutPostedByInput>;
  editedFlightControllers?: Maybe<
    FlightControllerUpdateManyWithoutUpdatedByInput
  >;
  addedMerchants?: Maybe<MerchantUpdateManyWithoutPostedByInput>;
  editedMerchants?: Maybe<MerchantUpdateManyWithoutUpdatedByInput>;
}

export interface LinkUpdateInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneWithoutLinksInput>;
  votes?: Maybe<VoteUpdateManyWithoutLinkInput>;
}

export interface MerchantUpdateManyWithoutPostedByInput {
  create?: Maybe<
    MerchantCreateWithoutPostedByInput[] | MerchantCreateWithoutPostedByInput
  >;
  delete?: Maybe<MerchantWhereUniqueInput[] | MerchantWhereUniqueInput>;
  connect?: Maybe<MerchantWhereUniqueInput[] | MerchantWhereUniqueInput>;
  set?: Maybe<MerchantWhereUniqueInput[] | MerchantWhereUniqueInput>;
  disconnect?: Maybe<MerchantWhereUniqueInput[] | MerchantWhereUniqueInput>;
  update?: Maybe<
    | MerchantUpdateWithWhereUniqueWithoutPostedByInput[]
    | MerchantUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | MerchantUpsertWithWhereUniqueWithoutPostedByInput[]
    | MerchantUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<MerchantScalarWhereInput[] | MerchantScalarWhereInput>;
  updateMany?: Maybe<
    | MerchantUpdateManyWithWhereNestedInput[]
    | MerchantUpdateManyWithWhereNestedInput
  >;
}

export interface FlightControllerMerchantLinkUpdateInput {
  merchant?: Maybe<MerchantUpdateOneRequiredWithoutFlightControllersInput>;
  flightController?: Maybe<
    FlightControllerUpdateOneRequiredWithoutMerchantLinksInput
  >;
  url?: Maybe<String>;
  price?: Maybe<Float>;
  inStock?: Maybe<Boolean>;
  postedBy?: Maybe<UserUpdateOneRequiredWithoutAddedFlightControllersInput>;
}

export interface MerchantUpdateWithWhereUniqueWithoutPostedByInput {
  where: MerchantWhereUniqueInput;
  data: MerchantUpdateWithoutPostedByDataInput;
}

export interface UserUpsertWithoutFlightControllersInput {
  update: UserUpdateWithoutFlightControllersDataInput;
  create: UserCreateWithoutFlightControllersInput;
}

export interface MerchantUpdateWithoutPostedByDataInput {
  updatedBy?: Maybe<UserUpdateOneWithoutEditedMerchantsInput>;
  flightControllers?: Maybe<
    FlightControllerMerchantLinkUpdateManyWithoutMerchantInput
  >;
  name?: Maybe<String>;
  url?: Maybe<String>;
  affiliateId?: Maybe<String>;
  disabled?: Maybe<Boolean>;
}

export interface LinkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  OR?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  NOT?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
}

export interface UserUpdateOneWithoutEditedMerchantsInput {
  create?: Maybe<UserCreateWithoutEditedMerchantsInput>;
  update?: Maybe<UserUpdateWithoutEditedMerchantsDataInput>;
  upsert?: Maybe<UserUpsertWithoutEditedMerchantsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateOneWithoutFlightControllersInput {
  create?: Maybe<UserCreateWithoutFlightControllersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutEditedMerchantsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  flightControllers?: Maybe<FlightControllerUpdateManyWithoutPostedByInput>;
  editedFlightControllers?: Maybe<
    FlightControllerUpdateManyWithoutUpdatedByInput
  >;
  addedMerchants?: Maybe<MerchantUpdateManyWithoutPostedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkUpdateManyWithoutPostedByInput
  >;
}

export interface VoteCreateManyWithoutLinkInput {
  create?: Maybe<VoteCreateWithoutLinkInput[] | VoteCreateWithoutLinkInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface FlightControllerMerchantLinkUpdateManyWithoutPostedByInput {
  create?: Maybe<
    | FlightControllerMerchantLinkCreateWithoutPostedByInput[]
    | FlightControllerMerchantLinkCreateWithoutPostedByInput
  >;
  delete?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
  connect?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
  set?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
  disconnect?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
  update?: Maybe<
    | FlightControllerMerchantLinkUpdateWithWhereUniqueWithoutPostedByInput[]
    | FlightControllerMerchantLinkUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | FlightControllerMerchantLinkUpsertWithWhereUniqueWithoutPostedByInput[]
    | FlightControllerMerchantLinkUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<
    | FlightControllerMerchantLinkScalarWhereInput[]
    | FlightControllerMerchantLinkScalarWhereInput
  >;
  updateMany?: Maybe<
    | FlightControllerMerchantLinkUpdateManyWithWhereNestedInput[]
    | FlightControllerMerchantLinkUpdateManyWithWhereNestedInput
  >;
}

export interface FlightControllerCreateManyWithoutPostedByInput {
  create?: Maybe<
    | FlightControllerCreateWithoutPostedByInput[]
    | FlightControllerCreateWithoutPostedByInput
  >;
  connect?: Maybe<
    FlightControllerWhereUniqueInput[] | FlightControllerWhereUniqueInput
  >;
}

export interface FlightControllerMerchantLinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: FlightControllerMerchantLinkWhereUniqueInput;
  data: FlightControllerMerchantLinkUpdateWithoutPostedByDataInput;
}

export interface VoteCreateManyWithoutUserInput {
  create?: Maybe<VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface FlightControllerMerchantLinkUpdateWithoutPostedByDataInput {
  merchant?: Maybe<MerchantUpdateOneRequiredWithoutFlightControllersInput>;
  flightController?: Maybe<
    FlightControllerUpdateOneRequiredWithoutMerchantLinksInput
  >;
  url?: Maybe<String>;
  price?: Maybe<Float>;
  inStock?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutLinksInput {
  create?: Maybe<UserCreateWithoutLinksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface FlightControllerMerchantLinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: FlightControllerMerchantLinkWhereUniqueInput;
  update: FlightControllerMerchantLinkUpdateWithoutPostedByDataInput;
  create: FlightControllerMerchantLinkCreateWithoutPostedByInput;
}

export interface FlightControllerMerchantLinkCreateManyWithoutFlightControllerInput {
  create?: Maybe<
    | FlightControllerMerchantLinkCreateWithoutFlightControllerInput[]
    | FlightControllerMerchantLinkCreateWithoutFlightControllerInput
  >;
  connect?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
}

export interface FlightControllerMerchantLinkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  inStock?: Maybe<Boolean>;
  inStock_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    | FlightControllerMerchantLinkScalarWhereInput[]
    | FlightControllerMerchantLinkScalarWhereInput
  >;
  OR?: Maybe<
    | FlightControllerMerchantLinkScalarWhereInput[]
    | FlightControllerMerchantLinkScalarWhereInput
  >;
  NOT?: Maybe<
    | FlightControllerMerchantLinkScalarWhereInput[]
    | FlightControllerMerchantLinkScalarWhereInput
  >;
}

export interface UserCreateOneWithoutAddedMerchantsInput {
  create?: Maybe<UserCreateWithoutAddedMerchantsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface FlightControllerMerchantLinkUpdateManyWithWhereNestedInput {
  where: FlightControllerMerchantLinkScalarWhereInput;
  data: FlightControllerMerchantLinkUpdateManyDataInput;
}

export interface FlightControllerMerchantLinkCreateManyWithoutMerchantInput {
  create?: Maybe<
    | FlightControllerMerchantLinkCreateWithoutMerchantInput[]
    | FlightControllerMerchantLinkCreateWithoutMerchantInput
  >;
  connect?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
}

export interface FlightControllerMerchantLinkUpdateManyDataInput {
  url?: Maybe<String>;
  price?: Maybe<Float>;
  inStock?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutAddedFlightControllersInput {
  create?: Maybe<UserCreateWithoutAddedFlightControllersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertWithoutEditedMerchantsInput {
  update: UserUpdateWithoutEditedMerchantsDataInput;
  create: UserCreateWithoutEditedMerchantsInput;
}

export interface UserCreateOneWithoutEditedMerchantsInput {
  create?: Maybe<UserCreateWithoutEditedMerchantsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface MerchantUpsertWithWhereUniqueWithoutPostedByInput {
  where: MerchantWhereUniqueInput;
  update: MerchantUpdateWithoutPostedByDataInput;
  create: MerchantCreateWithoutPostedByInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  links_every?: Maybe<LinkWhereInput>;
  links_some?: Maybe<LinkWhereInput>;
  links_none?: Maybe<LinkWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  flightControllers_every?: Maybe<FlightControllerWhereInput>;
  flightControllers_some?: Maybe<FlightControllerWhereInput>;
  flightControllers_none?: Maybe<FlightControllerWhereInput>;
  editedFlightControllers_every?: Maybe<FlightControllerWhereInput>;
  editedFlightControllers_some?: Maybe<FlightControllerWhereInput>;
  editedFlightControllers_none?: Maybe<FlightControllerWhereInput>;
  addedMerchants_every?: Maybe<MerchantWhereInput>;
  addedMerchants_some?: Maybe<MerchantWhereInput>;
  addedMerchants_none?: Maybe<MerchantWhereInput>;
  editedMerchants_every?: Maybe<MerchantWhereInput>;
  editedMerchants_some?: Maybe<MerchantWhereInput>;
  editedMerchants_none?: Maybe<MerchantWhereInput>;
  AddedFlightControllers_every?: Maybe<FlightControllerMerchantLinkWhereInput>;
  AddedFlightControllers_some?: Maybe<FlightControllerMerchantLinkWhereInput>;
  AddedFlightControllers_none?: Maybe<FlightControllerMerchantLinkWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface MerchantScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  affiliateId?: Maybe<String>;
  affiliateId_not?: Maybe<String>;
  affiliateId_in?: Maybe<String[] | String>;
  affiliateId_not_in?: Maybe<String[] | String>;
  affiliateId_lt?: Maybe<String>;
  affiliateId_lte?: Maybe<String>;
  affiliateId_gt?: Maybe<String>;
  affiliateId_gte?: Maybe<String>;
  affiliateId_contains?: Maybe<String>;
  affiliateId_not_contains?: Maybe<String>;
  affiliateId_starts_with?: Maybe<String>;
  affiliateId_not_starts_with?: Maybe<String>;
  affiliateId_ends_with?: Maybe<String>;
  affiliateId_not_ends_with?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  disabled_not?: Maybe<Boolean>;
  AND?: Maybe<MerchantScalarWhereInput[] | MerchantScalarWhereInput>;
  OR?: Maybe<MerchantScalarWhereInput[] | MerchantScalarWhereInput>;
  NOT?: Maybe<MerchantScalarWhereInput[] | MerchantScalarWhereInput>;
}

export interface VoteCreateInput {
  id?: Maybe<ID_Input>;
  link: LinkCreateOneWithoutVotesInput;
  user: UserCreateOneWithoutVotesInput;
}

export interface MerchantUpdateManyWithWhereNestedInput {
  where: MerchantScalarWhereInput;
  data: MerchantUpdateManyDataInput;
}

export interface MerchantCreateInput {
  id?: Maybe<ID_Input>;
  postedBy?: Maybe<UserCreateOneWithoutAddedMerchantsInput>;
  updatedBy?: Maybe<UserCreateOneWithoutEditedMerchantsInput>;
  flightControllers?: Maybe<
    FlightControllerMerchantLinkCreateManyWithoutMerchantInput
  >;
  name?: Maybe<String>;
  url?: Maybe<String>;
  affiliateId?: Maybe<String>;
  disabled?: Maybe<Boolean>;
}

export interface MerchantUpdateManyDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  affiliateId?: Maybe<String>;
  disabled?: Maybe<Boolean>;
}

export interface FlightControllerMerchantLinkCreateInput {
  id?: Maybe<ID_Input>;
  merchant: MerchantCreateOneWithoutFlightControllersInput;
  flightController: FlightControllerCreateOneWithoutMerchantLinksInput;
  url: String;
  price: Float;
  inStock?: Maybe<Boolean>;
  postedBy: UserCreateOneWithoutAddedFlightControllersInput;
}

export interface UserUpsertWithoutAddedFlightControllersInput {
  update: UserUpdateWithoutAddedFlightControllersDataInput;
  create: UserCreateWithoutAddedFlightControllersInput;
}

export interface UserCreateOneWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface FlightControllerMerchantLinkUpsertWithWhereUniqueWithoutMerchantInput {
  where: FlightControllerMerchantLinkWhereUniqueInput;
  update: FlightControllerMerchantLinkUpdateWithoutMerchantDataInput;
  create: FlightControllerMerchantLinkCreateWithoutMerchantInput;
}

export interface LinkCreateOneWithoutVotesInput {
  create?: Maybe<LinkCreateWithoutVotesInput>;
  connect?: Maybe<LinkWhereUniqueInput>;
}

export interface MerchantUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: MerchantWhereUniqueInput;
  update: MerchantUpdateWithoutUpdatedByDataInput;
  create: MerchantCreateWithoutUpdatedByInput;
}

export interface MerchantCreateOneWithoutFlightControllersInput {
  create?: Maybe<MerchantCreateWithoutFlightControllersInput>;
  connect?: Maybe<MerchantWhereUniqueInput>;
}

export interface UserUpsertWithoutAddedMerchantsInput {
  update: UserUpdateWithoutAddedMerchantsDataInput;
  create: UserCreateWithoutAddedMerchantsInput;
}

export interface FlightControllerCreateOneWithoutMerchantLinksInput {
  create?: Maybe<FlightControllerCreateWithoutMerchantLinksInput>;
  connect?: Maybe<FlightControllerWhereUniqueInput>;
}

export interface MerchantUpsertWithoutFlightControllersInput {
  update: MerchantUpdateWithoutFlightControllersDataInput;
  create: MerchantCreateWithoutFlightControllersInput;
}

export interface FlightControllerMerchantLinkCreateManyWithoutPostedByInput {
  create?: Maybe<
    | FlightControllerMerchantLinkCreateWithoutPostedByInput[]
    | FlightControllerMerchantLinkCreateWithoutPostedByInput
  >;
  connect?: Maybe<
    | FlightControllerMerchantLinkWhereUniqueInput[]
    | FlightControllerMerchantLinkWhereUniqueInput
  >;
}

export interface FlightControllerMerchantLinkUpsertWithWhereUniqueWithoutFlightControllerInput {
  where: FlightControllerMerchantLinkWhereUniqueInput;
  update: FlightControllerMerchantLinkUpdateWithoutFlightControllerDataInput;
  create: FlightControllerMerchantLinkCreateWithoutFlightControllerInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  flightControllers?: Maybe<FlightControllerCreateManyWithoutPostedByInput>;
  editedFlightControllers?: Maybe<
    FlightControllerCreateManyWithoutUpdatedByInput
  >;
  addedMerchants?: Maybe<MerchantCreateManyWithoutPostedByInput>;
  editedMerchants?: Maybe<MerchantCreateManyWithoutUpdatedByInput>;
  AddedFlightControllers?: Maybe<
    FlightControllerMerchantLinkCreateManyWithoutPostedByInput
  >;
}

export interface FlightControllerUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: FlightControllerWhereUniqueInput;
  update: FlightControllerUpdateWithoutUpdatedByDataInput;
  create: FlightControllerCreateWithoutUpdatedByInput;
}

export type VoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FlightControllerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  disabled_not?: Maybe<Boolean>;
  releaseDate?: Maybe<DateTimeInput>;
  releaseDate_not?: Maybe<DateTimeInput>;
  releaseDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  releaseDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  releaseDate_lt?: Maybe<DateTimeInput>;
  releaseDate_lte?: Maybe<DateTimeInput>;
  releaseDate_gt?: Maybe<DateTimeInput>;
  releaseDate_gte?: Maybe<DateTimeInput>;
  uarts?: Maybe<Int>;
  uarts_not?: Maybe<Int>;
  uarts_in?: Maybe<Int[] | Int>;
  uarts_not_in?: Maybe<Int[] | Int>;
  uarts_lt?: Maybe<Int>;
  uarts_lte?: Maybe<Int>;
  uarts_gt?: Maybe<Int>;
  uarts_gte?: Maybe<Int>;
  gyroOne?: Maybe<Float>;
  gyroOne_not?: Maybe<Float>;
  gyroOne_in?: Maybe<Float[] | Float>;
  gyroOne_not_in?: Maybe<Float[] | Float>;
  gyroOne_lt?: Maybe<Float>;
  gyroOne_lte?: Maybe<Float>;
  gyroOne_gt?: Maybe<Float>;
  gyroOne_gte?: Maybe<Float>;
  gyroTwo?: Maybe<Float>;
  gyroTwo_not?: Maybe<Float>;
  gyroTwo_in?: Maybe<Float[] | Float>;
  gyroTwo_not_in?: Maybe<Float[] | Float>;
  gyroTwo_lt?: Maybe<Float>;
  gyroTwo_lte?: Maybe<Float>;
  gyroTwo_gt?: Maybe<Float>;
  gyroTwo_gte?: Maybe<Float>;
  weightInGrams?: Maybe<Float>;
  weightInGrams_not?: Maybe<Float>;
  weightInGrams_in?: Maybe<Float[] | Float>;
  weightInGrams_not_in?: Maybe<Float[] | Float>;
  weightInGrams_lt?: Maybe<Float>;
  weightInGrams_lte?: Maybe<Float>;
  weightInGrams_gt?: Maybe<Float>;
  weightInGrams_gte?: Maybe<Float>;
  cpu?: Maybe<String>;
  cpu_not?: Maybe<String>;
  cpu_in?: Maybe<String[] | String>;
  cpu_not_in?: Maybe<String[] | String>;
  cpu_lt?: Maybe<String>;
  cpu_lte?: Maybe<String>;
  cpu_gt?: Maybe<String>;
  cpu_gte?: Maybe<String>;
  cpu_contains?: Maybe<String>;
  cpu_not_contains?: Maybe<String>;
  cpu_starts_with?: Maybe<String>;
  cpu_not_starts_with?: Maybe<String>;
  cpu_ends_with?: Maybe<String>;
  cpu_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  dimensions?: Maybe<String>;
  dimensions_not?: Maybe<String>;
  dimensions_in?: Maybe<String[] | String>;
  dimensions_not_in?: Maybe<String[] | String>;
  dimensions_lt?: Maybe<String>;
  dimensions_lte?: Maybe<String>;
  dimensions_gt?: Maybe<String>;
  dimensions_gte?: Maybe<String>;
  dimensions_contains?: Maybe<String>;
  dimensions_not_contains?: Maybe<String>;
  dimensions_starts_with?: Maybe<String>;
  dimensions_not_starts_with?: Maybe<String>;
  dimensions_ends_with?: Maybe<String>;
  dimensions_not_ends_with?: Maybe<String>;
  holePattern?: Maybe<String>;
  holePattern_not?: Maybe<String>;
  holePattern_in?: Maybe<String[] | String>;
  holePattern_not_in?: Maybe<String[] | String>;
  holePattern_lt?: Maybe<String>;
  holePattern_lte?: Maybe<String>;
  holePattern_gt?: Maybe<String>;
  holePattern_gte?: Maybe<String>;
  holePattern_contains?: Maybe<String>;
  holePattern_not_contains?: Maybe<String>;
  holePattern_starts_with?: Maybe<String>;
  holePattern_not_starts_with?: Maybe<String>;
  holePattern_ends_with?: Maybe<String>;
  holePattern_not_ends_with?: Maybe<String>;
  voltageInputMin?: Maybe<Float>;
  voltageInputMin_not?: Maybe<Float>;
  voltageInputMin_in?: Maybe<Float[] | Float>;
  voltageInputMin_not_in?: Maybe<Float[] | Float>;
  voltageInputMin_lt?: Maybe<Float>;
  voltageInputMin_lte?: Maybe<Float>;
  voltageInputMin_gt?: Maybe<Float>;
  voltageInputMin_gte?: Maybe<Float>;
  voltageInputMax?: Maybe<Float>;
  voltageInputMax_not?: Maybe<Float>;
  voltageInputMax_in?: Maybe<Float[] | Float>;
  voltageInputMax_not_in?: Maybe<Float[] | Float>;
  voltageInputMax_lt?: Maybe<Float>;
  voltageInputMax_lte?: Maybe<Float>;
  voltageInputMax_gt?: Maybe<Float>;
  voltageInputMax_gte?: Maybe<Float>;
  osd?: Maybe<Boolean>;
  osd_not?: Maybe<Boolean>;
  accelerometer?: Maybe<Boolean>;
  accelerometer_not?: Maybe<Boolean>;
  barometer?: Maybe<Boolean>;
  barometer_not?: Maybe<Boolean>;
  spektrumPort?: Maybe<Boolean>;
  spektrumPort_not?: Maybe<Boolean>;
  usbInterface?: Maybe<Boolean>;
  usbInterface_not?: Maybe<Boolean>;
  ledWS2812Support?: Maybe<Boolean>;
  ledWS2812Support_not?: Maybe<Boolean>;
  rssiPad?: Maybe<Boolean>;
  rssiPad_not?: Maybe<Boolean>;
  currentSensor?: Maybe<Boolean>;
  currentSensor_not?: Maybe<Boolean>;
  beeperPad?: Maybe<Boolean>;
  beeperPad_not?: Maybe<Boolean>;
  beeperOnBoard?: Maybe<Boolean>;
  beeperOnBoard_not?: Maybe<Boolean>;
  antiVibrationGrommets?: Maybe<Boolean>;
  antiVibrationGrommets_not?: Maybe<Boolean>;
  builtInReceiver?: Maybe<String>;
  builtInReceiver_not?: Maybe<String>;
  builtInReceiver_in?: Maybe<String[] | String>;
  builtInReceiver_not_in?: Maybe<String[] | String>;
  builtInReceiver_lt?: Maybe<String>;
  builtInReceiver_lte?: Maybe<String>;
  builtInReceiver_gt?: Maybe<String>;
  builtInReceiver_gte?: Maybe<String>;
  builtInReceiver_contains?: Maybe<String>;
  builtInReceiver_not_contains?: Maybe<String>;
  builtInReceiver_starts_with?: Maybe<String>;
  builtInReceiver_not_starts_with?: Maybe<String>;
  builtInReceiver_ends_with?: Maybe<String>;
  builtInReceiver_not_ends_with?: Maybe<String>;
  threeVoltOutput?: Maybe<Boolean>;
  threeVoltOutput_not?: Maybe<Boolean>;
  fiveVoltOut?: Maybe<Boolean>;
  fiveVoltOut_not?: Maybe<Boolean>;
  cameraControl?: Maybe<Boolean>;
  cameraControl_not?: Maybe<Boolean>;
  AND?: Maybe<
    FlightControllerScalarWhereInput[] | FlightControllerScalarWhereInput
  >;
  OR?: Maybe<
    FlightControllerScalarWhereInput[] | FlightControllerScalarWhereInput
  >;
  NOT?: Maybe<
    FlightControllerScalarWhereInput[] | FlightControllerScalarWhereInput
  >;
}

export interface UserCreateOneWithoutEditedFlightControllersInput {
  create?: Maybe<UserCreateWithoutEditedFlightControllersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface FlightControllerUpdateManyWithWhereNestedInput {
  where: FlightControllerScalarWhereInput;
  data: FlightControllerUpdateManyDataInput;
}

export interface MerchantCreateManyWithoutUpdatedByInput {
  create?: Maybe<
    MerchantCreateWithoutUpdatedByInput[] | MerchantCreateWithoutUpdatedByInput
  >;
  connect?: Maybe<MerchantWhereUniqueInput[] | MerchantWhereUniqueInput>;
}

export interface FlightControllerUpdateManyDataInput {
  name?: Maybe<String>;
  disabled?: Maybe<Boolean>;
  releaseDate?: Maybe<DateTimeInput>;
  uarts?: Maybe<Int>;
  gyroOne?: Maybe<Float>;
  gyroTwo?: Maybe<Float>;
  weightInGrams?: Maybe<Float>;
  cpu?: Maybe<String>;
  description?: Maybe<String>;
  dimensions?: Maybe<String>;
  holePattern?: Maybe<String>;
  voltageInputMin?: Maybe<Float>;
  voltageInputMax?: Maybe<Float>;
  osd?: Maybe<Boolean>;
  accelerometer?: Maybe<Boolean>;
  barometer?: Maybe<Boolean>;
  spektrumPort?: Maybe<Boolean>;
  usbInterface?: Maybe<Boolean>;
  ledWS2812Support?: Maybe<Boolean>;
  rssiPad?: Maybe<Boolean>;
  currentSensor?: Maybe<Boolean>;
  beeperPad?: Maybe<Boolean>;
  beeperOnBoard?: Maybe<Boolean>;
  antiVibrationGrommets?: Maybe<Boolean>;
  builtInReceiver?: Maybe<String>;
  threeVoltOutput?: Maybe<Boolean>;
  fiveVoltOut?: Maybe<Boolean>;
  cameraControl?: Maybe<Boolean>;
}

export interface LinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LinkWhereInput>;
  AND?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  OR?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  NOT?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
}

export interface VoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  OR?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  NOT?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutUserDataInput;
  create: VoteCreateWithoutUserInput;
}

export interface LinkUpsertWithoutVotesInput {
  update: LinkUpdateWithoutVotesDataInput;
  create: LinkCreateWithoutVotesInput;
}

export interface UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput;
  create: UserCreateWithoutLinksInput;
}

export interface LinkCreateInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
  postedBy?: Maybe<UserCreateOneWithoutLinksInput>;
  votes?: Maybe<VoteCreateManyWithoutLinkInput>;
}

export interface MerchantCreateManyWithoutPostedByInput {
  create?: Maybe<
    MerchantCreateWithoutPostedByInput[] | MerchantCreateWithoutPostedByInput
  >;
  connect?: Maybe<MerchantWhereUniqueInput[] | MerchantWhereUniqueInput>;
}

export interface FlightControllerCreateManyWithoutUpdatedByInput {
  create?: Maybe<
    | FlightControllerCreateWithoutUpdatedByInput[]
    | FlightControllerCreateWithoutUpdatedByInput
  >;
  connect?: Maybe<
    FlightControllerWhereUniqueInput[] | FlightControllerWhereUniqueInput
  >;
}

export interface LinkCreateManyWithoutPostedByInput {
  create?: Maybe<
    LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput
  >;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VotePreviousValues {
  id: ID_Output;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface FlightControllerMerchantLinkEdge {
  node: FlightControllerMerchantLink;
  cursor: String;
}

export interface FlightControllerMerchantLinkEdgePromise
  extends Promise<FlightControllerMerchantLinkEdge>,
    Fragmentable {
  node: <T = FlightControllerMerchantLinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FlightControllerMerchantLinkEdgeSubscription
  extends Promise<AsyncIterator<FlightControllerMerchantLinkEdge>>,
    Fragmentable {
  node: <T = FlightControllerMerchantLinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MerchantPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name?: String;
  url?: String;
  affiliateId?: String;
  disabled?: Boolean;
}

export interface MerchantPreviousValuesPromise
  extends Promise<MerchantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  affiliateId: () => Promise<String>;
  disabled: () => Promise<Boolean>;
}

export interface MerchantPreviousValuesSubscription
  extends Promise<AsyncIterator<MerchantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  affiliateId: () => Promise<AsyncIterator<String>>;
  disabled: () => Promise<AsyncIterator<Boolean>>;
}

export interface FlightControllerMerchantLinkConnection {
  pageInfo: PageInfo;
  edges: FlightControllerMerchantLinkEdge[];
}

export interface FlightControllerMerchantLinkConnectionPromise
  extends Promise<FlightControllerMerchantLinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FlightControllerMerchantLinkEdge>>() => T;
  aggregate: <T = AggregateFlightControllerMerchantLinkPromise>() => T;
}

export interface FlightControllerMerchantLinkConnectionSubscription
  extends Promise<AsyncIterator<FlightControllerMerchantLinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<FlightControllerMerchantLinkEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateFlightControllerMerchantLinkSubscription>() => T;
}

export interface FlightControllerEdge {
  node: FlightController;
  cursor: String;
}

export interface FlightControllerEdgePromise
  extends Promise<FlightControllerEdge>,
    Fragmentable {
  node: <T = FlightControllerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FlightControllerEdgeSubscription
  extends Promise<AsyncIterator<FlightControllerEdge>>,
    Fragmentable {
  node: <T = FlightControllerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFlightController {
  count: Int;
}

export interface AggregateFlightControllerPromise
  extends Promise<AggregateFlightController>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFlightControllerSubscription
  extends Promise<AsyncIterator<AggregateFlightController>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FlightControllerConnection {
  pageInfo: PageInfo;
  edges: FlightControllerEdge[];
}

export interface FlightControllerConnectionPromise
  extends Promise<FlightControllerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FlightControllerEdge>>() => T;
  aggregate: <T = AggregateFlightControllerPromise>() => T;
}

export interface FlightControllerConnectionSubscription
  extends Promise<AsyncIterator<FlightControllerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FlightControllerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFlightControllerSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface FlightControllerMerchantLink {
  id: ID_Output;
  url: String;
  price: Float;
  inStock?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface FlightControllerMerchantLinkPromise
  extends Promise<FlightControllerMerchantLink>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  merchant: <T = MerchantPromise>() => T;
  flightController: <T = FlightControllerPromise>() => T;
  url: () => Promise<String>;
  price: () => Promise<Float>;
  inStock: () => Promise<Boolean>;
  postedBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FlightControllerMerchantLinkSubscription
  extends Promise<AsyncIterator<FlightControllerMerchantLink>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  merchant: <T = MerchantSubscription>() => T;
  flightController: <T = FlightControllerSubscription>() => T;
  url: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  inStock: () => Promise<AsyncIterator<Boolean>>;
  postedBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FlightControllerMerchantLinkNullablePromise
  extends Promise<FlightControllerMerchantLink | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  merchant: <T = MerchantPromise>() => T;
  flightController: <T = FlightControllerPromise>() => T;
  url: () => Promise<String>;
  price: () => Promise<Float>;
  inStock: () => Promise<Boolean>;
  postedBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface FlightController {
  id: ID_Output;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name?: String;
  disabled?: Boolean;
  releaseDate?: DateTimeOutput;
  uarts?: Int;
  gyroOne?: Float;
  gyroTwo?: Float;
  weightInGrams?: Float;
  cpu?: String;
  description?: String;
  dimensions?: String;
  holePattern?: String;
  voltageInputMin?: Float;
  voltageInputMax?: Float;
  osd?: Boolean;
  accelerometer?: Boolean;
  barometer?: Boolean;
  spektrumPort?: Boolean;
  usbInterface?: Boolean;
  ledWS2812Support?: Boolean;
  rssiPad?: Boolean;
  currentSensor?: Boolean;
  beeperPad?: Boolean;
  beeperOnBoard?: Boolean;
  antiVibrationGrommets?: Boolean;
  builtInReceiver?: String;
  threeVoltOutput?: Boolean;
  fiveVoltOut?: Boolean;
  cameraControl?: Boolean;
}

export interface FlightControllerPromise
  extends Promise<FlightController>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy: <T = UserPromise>() => T;
  updatedBy: <T = UserPromise>() => T;
  merchantLinks: <T = FragmentableArray<FlightControllerMerchantLink>>(args?: {
    where?: FlightControllerMerchantLinkWhereInput;
    orderBy?: FlightControllerMerchantLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  disabled: () => Promise<Boolean>;
  releaseDate: () => Promise<DateTimeOutput>;
  uarts: () => Promise<Int>;
  gyroOne: () => Promise<Float>;
  gyroTwo: () => Promise<Float>;
  weightInGrams: () => Promise<Float>;
  cpu: () => Promise<String>;
  description: () => Promise<String>;
  dimensions: () => Promise<String>;
  holePattern: () => Promise<String>;
  voltageInputMin: () => Promise<Float>;
  voltageInputMax: () => Promise<Float>;
  osd: () => Promise<Boolean>;
  accelerometer: () => Promise<Boolean>;
  barometer: () => Promise<Boolean>;
  spektrumPort: () => Promise<Boolean>;
  usbInterface: () => Promise<Boolean>;
  ledWS2812Support: () => Promise<Boolean>;
  rssiPad: () => Promise<Boolean>;
  currentSensor: () => Promise<Boolean>;
  beeperPad: () => Promise<Boolean>;
  beeperOnBoard: () => Promise<Boolean>;
  antiVibrationGrommets: () => Promise<Boolean>;
  builtInReceiver: () => Promise<String>;
  threeVoltOutput: () => Promise<Boolean>;
  fiveVoltOut: () => Promise<Boolean>;
  cameraControl: () => Promise<Boolean>;
}

export interface FlightControllerSubscription
  extends Promise<AsyncIterator<FlightController>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  postedBy: <T = UserSubscription>() => T;
  updatedBy: <T = UserSubscription>() => T;
  merchantLinks: <
    T = Promise<AsyncIterator<FlightControllerMerchantLinkSubscription>>
  >(args?: {
    where?: FlightControllerMerchantLinkWhereInput;
    orderBy?: FlightControllerMerchantLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<AsyncIterator<String>>;
  disabled: () => Promise<AsyncIterator<Boolean>>;
  releaseDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  uarts: () => Promise<AsyncIterator<Int>>;
  gyroOne: () => Promise<AsyncIterator<Float>>;
  gyroTwo: () => Promise<AsyncIterator<Float>>;
  weightInGrams: () => Promise<AsyncIterator<Float>>;
  cpu: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  dimensions: () => Promise<AsyncIterator<String>>;
  holePattern: () => Promise<AsyncIterator<String>>;
  voltageInputMin: () => Promise<AsyncIterator<Float>>;
  voltageInputMax: () => Promise<AsyncIterator<Float>>;
  osd: () => Promise<AsyncIterator<Boolean>>;
  accelerometer: () => Promise<AsyncIterator<Boolean>>;
  barometer: () => Promise<AsyncIterator<Boolean>>;
  spektrumPort: () => Promise<AsyncIterator<Boolean>>;
  usbInterface: () => Promise<AsyncIterator<Boolean>>;
  ledWS2812Support: () => Promise<AsyncIterator<Boolean>>;
  rssiPad: () => Promise<AsyncIterator<Boolean>>;
  currentSensor: () => Promise<AsyncIterator<Boolean>>;
  beeperPad: () => Promise<AsyncIterator<Boolean>>;
  beeperOnBoard: () => Promise<AsyncIterator<Boolean>>;
  antiVibrationGrommets: () => Promise<AsyncIterator<Boolean>>;
  builtInReceiver: () => Promise<AsyncIterator<String>>;
  threeVoltOutput: () => Promise<AsyncIterator<Boolean>>;
  fiveVoltOut: () => Promise<AsyncIterator<Boolean>>;
  cameraControl: () => Promise<AsyncIterator<Boolean>>;
}

export interface FlightControllerNullablePromise
  extends Promise<FlightController | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy: <T = UserPromise>() => T;
  updatedBy: <T = UserPromise>() => T;
  merchantLinks: <T = FragmentableArray<FlightControllerMerchantLink>>(args?: {
    where?: FlightControllerMerchantLinkWhereInput;
    orderBy?: FlightControllerMerchantLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  disabled: () => Promise<Boolean>;
  releaseDate: () => Promise<DateTimeOutput>;
  uarts: () => Promise<Int>;
  gyroOne: () => Promise<Float>;
  gyroTwo: () => Promise<Float>;
  weightInGrams: () => Promise<Float>;
  cpu: () => Promise<String>;
  description: () => Promise<String>;
  dimensions: () => Promise<String>;
  holePattern: () => Promise<String>;
  voltageInputMin: () => Promise<Float>;
  voltageInputMax: () => Promise<Float>;
  osd: () => Promise<Boolean>;
  accelerometer: () => Promise<Boolean>;
  barometer: () => Promise<Boolean>;
  spektrumPort: () => Promise<Boolean>;
  usbInterface: () => Promise<Boolean>;
  ledWS2812Support: () => Promise<Boolean>;
  rssiPad: () => Promise<Boolean>;
  currentSensor: () => Promise<Boolean>;
  beeperPad: () => Promise<Boolean>;
  beeperOnBoard: () => Promise<Boolean>;
  antiVibrationGrommets: () => Promise<Boolean>;
  builtInReceiver: () => Promise<String>;
  threeVoltOutput: () => Promise<Boolean>;
  fiveVoltOut: () => Promise<Boolean>;
  cameraControl: () => Promise<Boolean>;
}

export interface MerchantEdge {
  node: Merchant;
  cursor: String;
}

export interface MerchantEdgePromise
  extends Promise<MerchantEdge>,
    Fragmentable {
  node: <T = MerchantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MerchantEdgeSubscription
  extends Promise<AsyncIterator<MerchantEdge>>,
    Fragmentable {
  node: <T = MerchantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FlightControllerSubscriptionPayload {
  mutation: MutationType;
  node: FlightController;
  updatedFields: String[];
  previousValues: FlightControllerPreviousValues;
}

export interface FlightControllerSubscriptionPayloadPromise
  extends Promise<FlightControllerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FlightControllerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FlightControllerPreviousValuesPromise>() => T;
}

export interface FlightControllerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FlightControllerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FlightControllerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FlightControllerPreviousValuesSubscription>() => T;
}

export interface AggregateLink {
  count: Int;
}

export interface AggregateLinkPromise
  extends Promise<AggregateLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLinkSubscription
  extends Promise<AsyncIterator<AggregateLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FlightControllerPreviousValues {
  id: ID_Output;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name?: String;
  disabled?: Boolean;
  releaseDate?: DateTimeOutput;
  uarts?: Int;
  gyroOne?: Float;
  gyroTwo?: Float;
  weightInGrams?: Float;
  cpu?: String;
  description?: String;
  dimensions?: String;
  holePattern?: String;
  voltageInputMin?: Float;
  voltageInputMax?: Float;
  osd?: Boolean;
  accelerometer?: Boolean;
  barometer?: Boolean;
  spektrumPort?: Boolean;
  usbInterface?: Boolean;
  ledWS2812Support?: Boolean;
  rssiPad?: Boolean;
  currentSensor?: Boolean;
  beeperPad?: Boolean;
  beeperOnBoard?: Boolean;
  antiVibrationGrommets?: Boolean;
  builtInReceiver?: String;
  threeVoltOutput?: Boolean;
  fiveVoltOut?: Boolean;
  cameraControl?: Boolean;
}

export interface FlightControllerPreviousValuesPromise
  extends Promise<FlightControllerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  disabled: () => Promise<Boolean>;
  releaseDate: () => Promise<DateTimeOutput>;
  uarts: () => Promise<Int>;
  gyroOne: () => Promise<Float>;
  gyroTwo: () => Promise<Float>;
  weightInGrams: () => Promise<Float>;
  cpu: () => Promise<String>;
  description: () => Promise<String>;
  dimensions: () => Promise<String>;
  holePattern: () => Promise<String>;
  voltageInputMin: () => Promise<Float>;
  voltageInputMax: () => Promise<Float>;
  osd: () => Promise<Boolean>;
  accelerometer: () => Promise<Boolean>;
  barometer: () => Promise<Boolean>;
  spektrumPort: () => Promise<Boolean>;
  usbInterface: () => Promise<Boolean>;
  ledWS2812Support: () => Promise<Boolean>;
  rssiPad: () => Promise<Boolean>;
  currentSensor: () => Promise<Boolean>;
  beeperPad: () => Promise<Boolean>;
  beeperOnBoard: () => Promise<Boolean>;
  antiVibrationGrommets: () => Promise<Boolean>;
  builtInReceiver: () => Promise<String>;
  threeVoltOutput: () => Promise<Boolean>;
  fiveVoltOut: () => Promise<Boolean>;
  cameraControl: () => Promise<Boolean>;
}

export interface FlightControllerPreviousValuesSubscription
  extends Promise<AsyncIterator<FlightControllerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  disabled: () => Promise<AsyncIterator<Boolean>>;
  releaseDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  uarts: () => Promise<AsyncIterator<Int>>;
  gyroOne: () => Promise<AsyncIterator<Float>>;
  gyroTwo: () => Promise<AsyncIterator<Float>>;
  weightInGrams: () => Promise<AsyncIterator<Float>>;
  cpu: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  dimensions: () => Promise<AsyncIterator<String>>;
  holePattern: () => Promise<AsyncIterator<String>>;
  voltageInputMin: () => Promise<AsyncIterator<Float>>;
  voltageInputMax: () => Promise<AsyncIterator<Float>>;
  osd: () => Promise<AsyncIterator<Boolean>>;
  accelerometer: () => Promise<AsyncIterator<Boolean>>;
  barometer: () => Promise<AsyncIterator<Boolean>>;
  spektrumPort: () => Promise<AsyncIterator<Boolean>>;
  usbInterface: () => Promise<AsyncIterator<Boolean>>;
  ledWS2812Support: () => Promise<AsyncIterator<Boolean>>;
  rssiPad: () => Promise<AsyncIterator<Boolean>>;
  currentSensor: () => Promise<AsyncIterator<Boolean>>;
  beeperPad: () => Promise<AsyncIterator<Boolean>>;
  beeperOnBoard: () => Promise<AsyncIterator<Boolean>>;
  antiVibrationGrommets: () => Promise<AsyncIterator<Boolean>>;
  builtInReceiver: () => Promise<AsyncIterator<String>>;
  threeVoltOutput: () => Promise<AsyncIterator<Boolean>>;
  fiveVoltOut: () => Promise<AsyncIterator<Boolean>>;
  cameraControl: () => Promise<AsyncIterator<Boolean>>;
}

export interface LinkConnection {
  pageInfo: PageInfo;
  edges: LinkEdge[];
}

export interface LinkConnectionPromise
  extends Promise<LinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LinkEdge>>() => T;
  aggregate: <T = AggregateLinkPromise>() => T;
}

export interface LinkConnectionSubscription
  extends Promise<AsyncIterator<LinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLinkSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  flightControllers: <T = FragmentableArray<FlightController>>(args?: {
    where?: FlightControllerWhereInput;
    orderBy?: FlightControllerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  editedFlightControllers: <T = FragmentableArray<FlightController>>(args?: {
    where?: FlightControllerWhereInput;
    orderBy?: FlightControllerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addedMerchants: <T = FragmentableArray<Merchant>>(args?: {
    where?: MerchantWhereInput;
    orderBy?: MerchantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  editedMerchants: <T = FragmentableArray<Merchant>>(args?: {
    where?: MerchantWhereInput;
    orderBy?: MerchantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  AddedFlightControllers: <
    T = FragmentableArray<FlightControllerMerchantLink>
  >(args?: {
    where?: FlightControllerMerchantLinkWhereInput;
    orderBy?: FlightControllerMerchantLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  links: <T = Promise<AsyncIterator<LinkSubscription>>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  flightControllers: <
    T = Promise<AsyncIterator<FlightControllerSubscription>>
  >(args?: {
    where?: FlightControllerWhereInput;
    orderBy?: FlightControllerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  editedFlightControllers: <
    T = Promise<AsyncIterator<FlightControllerSubscription>>
  >(args?: {
    where?: FlightControllerWhereInput;
    orderBy?: FlightControllerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addedMerchants: <T = Promise<AsyncIterator<MerchantSubscription>>>(args?: {
    where?: MerchantWhereInput;
    orderBy?: MerchantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  editedMerchants: <T = Promise<AsyncIterator<MerchantSubscription>>>(args?: {
    where?: MerchantWhereInput;
    orderBy?: MerchantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  AddedFlightControllers: <
    T = Promise<AsyncIterator<FlightControllerMerchantLinkSubscription>>
  >(args?: {
    where?: FlightControllerMerchantLinkWhereInput;
    orderBy?: FlightControllerMerchantLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  flightControllers: <T = FragmentableArray<FlightController>>(args?: {
    where?: FlightControllerWhereInput;
    orderBy?: FlightControllerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  editedFlightControllers: <T = FragmentableArray<FlightController>>(args?: {
    where?: FlightControllerWhereInput;
    orderBy?: FlightControllerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addedMerchants: <T = FragmentableArray<Merchant>>(args?: {
    where?: MerchantWhereInput;
    orderBy?: MerchantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  editedMerchants: <T = FragmentableArray<Merchant>>(args?: {
    where?: MerchantWhereInput;
    orderBy?: MerchantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  AddedFlightControllers: <
    T = FragmentableArray<FlightControllerMerchantLink>
  >(args?: {
    where?: FlightControllerMerchantLinkWhereInput;
    orderBy?: FlightControllerMerchantLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface FlightControllerMerchantLinkSubscriptionPayload {
  mutation: MutationType;
  node: FlightControllerMerchantLink;
  updatedFields: String[];
  previousValues: FlightControllerMerchantLinkPreviousValues;
}

export interface FlightControllerMerchantLinkSubscriptionPayloadPromise
  extends Promise<FlightControllerMerchantLinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FlightControllerMerchantLinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <
    T = FlightControllerMerchantLinkPreviousValuesPromise
  >() => T;
}

export interface FlightControllerMerchantLinkSubscriptionPayloadSubscription
  extends Promise<
      AsyncIterator<FlightControllerMerchantLinkSubscriptionPayload>
    >,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FlightControllerMerchantLinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = FlightControllerMerchantLinkPreviousValuesSubscription
  >() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FlightControllerMerchantLinkPreviousValues {
  id: ID_Output;
  url: String;
  price: Float;
  inStock?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface FlightControllerMerchantLinkPreviousValuesPromise
  extends Promise<FlightControllerMerchantLinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  price: () => Promise<Float>;
  inStock: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FlightControllerMerchantLinkPreviousValuesSubscription
  extends Promise<AsyncIterator<FlightControllerMerchantLinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  inStock: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Link {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LinkNullablePromise
  extends Promise<Link | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Merchant {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name?: String;
  url?: String;
  affiliateId?: String;
  disabled?: Boolean;
}

export interface MerchantPromise extends Promise<Merchant>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy: <T = UserPromise>() => T;
  updatedBy: <T = UserPromise>() => T;
  flightControllers: <
    T = FragmentableArray<FlightControllerMerchantLink>
  >(args?: {
    where?: FlightControllerMerchantLinkWhereInput;
    orderBy?: FlightControllerMerchantLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  url: () => Promise<String>;
  affiliateId: () => Promise<String>;
  disabled: () => Promise<Boolean>;
}

export interface MerchantSubscription
  extends Promise<AsyncIterator<Merchant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  postedBy: <T = UserSubscription>() => T;
  updatedBy: <T = UserSubscription>() => T;
  flightControllers: <
    T = Promise<AsyncIterator<FlightControllerMerchantLinkSubscription>>
  >(args?: {
    where?: FlightControllerMerchantLinkWhereInput;
    orderBy?: FlightControllerMerchantLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  affiliateId: () => Promise<AsyncIterator<String>>;
  disabled: () => Promise<AsyncIterator<Boolean>>;
}

export interface MerchantNullablePromise
  extends Promise<Merchant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy: <T = UserPromise>() => T;
  updatedBy: <T = UserPromise>() => T;
  flightControllers: <
    T = FragmentableArray<FlightControllerMerchantLink>
  >(args?: {
    where?: FlightControllerMerchantLinkWhereInput;
    orderBy?: FlightControllerMerchantLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  url: () => Promise<String>;
  affiliateId: () => Promise<String>;
  disabled: () => Promise<Boolean>;
}

export interface MerchantConnection {
  pageInfo: PageInfo;
  edges: MerchantEdge[];
}

export interface MerchantConnectionPromise
  extends Promise<MerchantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MerchantEdge>>() => T;
  aggregate: <T = AggregateMerchantPromise>() => T;
}

export interface MerchantConnectionSubscription
  extends Promise<AsyncIterator<MerchantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MerchantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMerchantSubscription>() => T;
}

export interface AggregateFlightControllerMerchantLink {
  count: Int;
}

export interface AggregateFlightControllerMerchantLinkPromise
  extends Promise<AggregateFlightControllerMerchantLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFlightControllerMerchantLinkSubscription
  extends Promise<AsyncIterator<AggregateFlightControllerMerchantLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MerchantSubscriptionPayload {
  mutation: MutationType;
  node: Merchant;
  updatedFields: String[];
  previousValues: MerchantPreviousValues;
}

export interface MerchantSubscriptionPayloadPromise
  extends Promise<MerchantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MerchantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MerchantPreviousValuesPromise>() => T;
}

export interface MerchantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MerchantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MerchantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MerchantPreviousValuesSubscription>() => T;
}

export interface Vote {
  id: ID_Output;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  link: <T = LinkPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  link: <T = LinkSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface VoteNullablePromise
  extends Promise<Vote | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  link: <T = LinkPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface LinkPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPreviousValuesPromise
  extends Promise<LinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface LinkPreviousValuesSubscription
  extends Promise<AsyncIterator<LinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface LinkSubscriptionPayload {
  mutation: MutationType;
  node: Link;
  updatedFields: String[];
  previousValues: LinkPreviousValues;
}

export interface LinkSubscriptionPayloadPromise
  extends Promise<LinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinkPreviousValuesPromise>() => T;
}

export interface LinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinkPreviousValuesSubscription>() => T;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LinkEdge {
  node: Link;
  cursor: String;
}

export interface LinkEdgePromise extends Promise<LinkEdge>, Fragmentable {
  node: <T = LinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LinkEdgeSubscription
  extends Promise<AsyncIterator<LinkEdge>>,
    Fragmentable {
  node: <T = LinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMerchant {
  count: Int;
}

export interface AggregateMerchantPromise
  extends Promise<AggregateMerchant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMerchantSubscription
  extends Promise<AsyncIterator<AggregateMerchant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Link",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  },
  {
    name: "FlightController",
    embedded: false
  },
  {
    name: "Merchant",
    embedded: false
  },
  {
    name: "FlightControllerMerchantLink",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
